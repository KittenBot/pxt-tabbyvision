<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="Ym1?.?CuM#_+-1Bz)@8+" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="=,~`,s?4#Z;3GYY?Rhh%" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tabbyvision {" line1="" line2="    let koiNewEventId = 1228" line3="    type Evtss = (t1: string, t2: string) =&gt; void" line4="    let mqttDataEvt: Evtss = null" line5="" line6="    // cached results" line7="    let _className: string = ''" line8="    let _posX: number = -1" line9="    let _posY: number = -1" line10="    let _posW: number = -1" line11="    let _posH: number = -1" line12="" line13="" line14="    export enum LCD_Direction {" line15="        //% block=Front" line16="        Front = 0," line17="        //% block=Back" line18="        Back = 2" line19="    }" line20="" line21="    export enum BTNCmd {" line22="        //% block=&quot;A&quot;" line23="        A = 1," line24="        //% block=&quot;B&quot;" line25="        B = 2," line26="        //% block=&quot;A+B&quot;" line27="        AB = 3" line28="    }" line29="" line30="    export enum ColorList {" line31="        //% block=&quot;Red&quot;" line32="        Red = 0," line33="        //% block=&quot;Blue&quot;" line34="        Blue = 1," line35="        //% block=&quot;Green&quot;" line36="        Green = 2," line37="        //% block=&quot;Yellow&quot;" line38="        Yellow = 3," line39="        //% block=&quot;Orange&quot;" line40="        Orange = 4," line41="        //% block=&quot;Purple&quot;" line42="        Purple = 5," line43="        //% block=&quot;Pink&quot;" line44="        Pink = 6," line45="        //% block=&quot;White&quot;" line46="        White = 7," line47="        //% block=&quot;Black&quot;" line48="        Black = 8," line49="        //% block=&quot;Custom&quot;" line50="        Custom = 9," line51="    }" line52="" line53="" line54="    export enum ModelFunction {" line55="        //% block=TrafficSign" line56="        TrafficSign = 0x1," line57="        //% block=ObjectTracking" line58="        ObjectTracking = 0x2," line59="        //% block=FaceTracking" line60="        FaceTracking = 0x3," line61="        //% block=NumberRecognition" line62="        NumberRecognition = 0x4," line63="        //% block=ClassifyImage" line64="        ClassifyImage = 0x5," line65="        //% block=LetterRecognition" line66="        LetterRecognition = 0x6,   " line67="    }" line68="" line69="    export enum CvFunction {" line70="        //% block=ColorBlobTracking" line71="        ColorBlobTracking = 0x10," line72="        //% block=LineFollower" line73="        LineFollower = 0x20," line74="    }" line75="" line76="    export enum FullFunction {" line77="        //% block=TrafficSign" line78="        TrafficSign = 0x1," line79="        //% block=ObjectTracking" line80="        ObjectTracking = 0x2," line81="        //% block=FaceTracking" line82="        FaceTracking = 0x3," line83="        //% block=NumberRecognition" line84="        NumberRecognition = 0x4," line85="        //% block=ClassifyImage" line86="        ClassifyImage = 0x5," line87="        //% block=LetterRecognition" line88="        LetterRecognition = 0x6," line89="        //% block=ColorBlobTracking" line90="        ColorBlobTracking = 0x10," line91="        //% block=LineFollower" line92="        LineFollower = 0x20," line93="    }" line94="" line95="    export enum ColorNames {" line96="        //% block=red" line97="        red = 1," line98="        //% block=blue" line99="        blue = 2," line100="        //% block=yellow" line101="        yellow = 3," line102="    }" line103="" line104="" line105="" line106="    /*" line107="    * VOC2012_Object Card" line108="    */" line109="" line110="    export enum VOC2012_Object {" line111="        //% block=aeroplane" line112="        aeroplane = 0," line113="        //% block=bicycle" line114="        bicycle = 1," line115="        //% block=bird" line116="        bird = 2," line117="        //% block=boat" line118="        boat = 3," line119="        //% block=bottle" line120="        bottle = 4," line121="        //% block=bus" line122="        bus = 5," line123="        //% block=car" line124="        car = 6," line125="        //% block=cat" line126="        cat = 7," line127="        //% block=chair" line128="        chair = 8," line129="        //% block=cow" line130="        cow = 9," line131="        //% block=diningtable" line132="        diningtable = 10," line133="        //% block=dog" line134="        dog = 11," line135="        //% block=horse" line136="        horse = 12," line137="        //% block=motorbike" line138="        motorbike = 13," line139="        //% block=person" line140="        person = 14," line141="        //% block=pottedplant" line142="        pottedplant = 15," line143="        //% block=sheep" line144="        sheep = 16," line145="        //% block=sofa" line146="        sofa = 17," line147="        //% block=train" line148="        train = 18," line149="        //% block=tvmonitor" line150="        tvmonitor = 19," line151="    }" line152="" line153="    /*" line154="    * Traffic sign Card" line155="    */" line156="    export enum TrafficCard {" line157="        //% block=&quot;Forward&quot;" line158="        forward = 1," line159="        //% block=&quot;Turn around&quot;" line160="        turnaround = 2," line161="        //% block=&quot;Left&quot;" line162="        left = 3," line163="        //% block=&quot;Right&quot;" line164="        right = 4," line165="        //% block=&quot;Stop&quot;" line166="        stop = 5," line167="        //% block=&quot;Speed limit&quot;" line168="        speedlimit = 6," line169="        //% block=&quot;Tunnel&quot;" line170="        tunnel = 7" line171="    }" line172="" line173="    /**" line174="    * Number Card" line175="    */" line176="    export enum NumberCard {" line177="        //% block=&quot;0&quot;" line178="        zero = 0," line179="        //% block=&quot;1&quot;" line180="        one = 1," line181="        //% block=&quot;2&quot;" line182="        two = 2," line183="        //% block=&quot;3&quot;" line184="        three = 3," line185="        //% block=&quot;4&quot;" line186="        four = 4," line187="        //% block=&quot;5&quot;" line188="        five = 5," line189="        //% block=&quot;6&quot;" line190="        six = 6," line191="        //% block=&quot;7&quot;" line192="        seven = 7," line193="        //% block=&quot;8&quot;" line194="        eight = 8," line195="        //% block=&quot;9&quot;" line196="        nine = 9" line197="    }" line198="    /**" line199="    * Letter Card" line200="    */" line201="    export enum LetterCard {" line202="        //% block=&quot;A&quot;" line203="        A = 0," line204="        //% block=&quot;B&quot;" line205="        B = 1," line206="        //% block=&quot;C&quot;" line207="        C = 2," line208="        //% block=&quot;D&quot;" line209="        D = 3," line210="        //% block=&quot;E&quot;" line211="        E = 4," line212="        //% block=&quot;F&quot;" line213="        F = 5" line214="    }" line215="" line216="    /**" line217="    * Result list" line218="    */" line219="    export enum GetResult {" line220="        //% block=&quot;X&quot;" line221="        result_X = 1," line222="        //% block=&quot;Y&quot;" line223="        result_Y = 2," line224="        //% block=&quot;W&quot;" line225="        result_W = 3," line226="        //% block=&quot;H&quot;" line227="        result_H = 4" line228="    }" line229="" line230="    /**" line231="     * Result XY" line232="     */" line233="    export enum GetResultXY {" line234="        //% block=&quot;X&quot;" line235="        result_X = 1," line236="        //% block=&quot;Y&quot;" line237="        result_Y = 2" line238="    }" line239="" line240="" line241="" line242="" line243="    let btnEvent: (btn: number) =&gt; void" line244="" line245="    function trim(n: string): string {" line246="        while (n.charCodeAt(n.length - 1) &lt; 0x1f) {" line247="            n = n.slice(0, n.length - 1)" line248="        }" line249="        return n" line250="    }" line251="" line252="    let modelCmd: number[] = [31,81,82,83,84];" line253="    serial.onDataReceived('\n', function () {" line254="        let a = serial.readUntil('\n')" line255="        if (a.charAt(0) == 'K') {" line256="            a = trim(a)" line257="            let b = a.slice(1, a.length).split(' ')" line258="            let cmd = parseInt(b[0])" line259="            if (cmd == 42) { // feature extraction" line260="                _className = b[1]" line261="            } else if (cmd == 15) { // color blob tracking" line262="                _posX = parseInt(b[1])" line263="                _posY = parseInt(b[2])" line264="                _posW = parseInt(b[3])" line265="                _posH = parseInt(b[4])" line266="            } else if (cmd == 19) { // line follower color" line267="                _posX = parseInt(b[1])" line268="                _posY = parseInt(b[2])" line269="            } else if (modelCmd.indexOf(cmd) != -1) { // model cmd" line270="                _posX = parseInt(b[1])" line271="                _posY = parseInt(b[2])" line272="                _posW = parseInt(b[3])" line273="                _posH = parseInt(b[4])" line274="                _className = b[5]" line275="            } else if (cmd == 3) { // btn" line276="                control.raiseEvent(koiNewEventId, parseInt(b[1]))" line277="            } else if (cmd == 55) { // btn" line278="                if (mqttDataEvt) {" line279="                    mqttDataEvt(b[1], b[2])" line280="                }" line281="            }" line282="        }" line283="    })" line284="" line285="    function getResultXYWH(res: GetResult): number {" line286="        let ret = -1" line287="        if (res == GetResult.result_X) {" line288="            ret = _posX" line289="            _posX = -1" line290="        } else if (res == GetResult.result_Y) {" line291="            ret = _posY" line292="            _posY = -1" line293="        } else if (res == GetResult.result_W) {" line294="            ret = _posW" line295="            _posW = -1" line296="        } else if (res == GetResult.result_H) {" line297="            ret = _posH" line298="            _posH = -1" line299="        }" line300="        return ret" line301="    }" line302="" line303="    function getResultXY(res: GetResultXY): number {" line304="        let ret2 = -1" line305="        if (res == GetResultXY.result_X) {" line306="            ret2 = _posX" line307="            _posX = -1" line308="        } else if (res == GetResultXY.result_Y) {" line309="            ret2 = _posY" line310="            _posY = -1" line311="        }" line312="        return ret2" line313="    }" line314="" line315="    function getResultClass(): string {" line316="        let ret3 = _className" line317="        _className = ''" line318="        return ret3" line319="    }" line320="" line321="" line322="    /**" line323="     * Init the tabbyvision library with serial connection" line324="     * @param tx Tx pin; eg: SerialPin.P13" line325="     * @param rx Rx pin; eg: SerialPin.P14" line326="     */" line327="    //% blockId=tabbyvision_init block=&quot;init tabbyvision Tx %tx Rx %rx&quot;" line328="    //% weight=100 group=&quot;Basic&quot;" line329="    export function init(tx: SerialPin, rx: SerialPin): void {" line330="        serial.redirect(tx, rx, BaudRate.BaudRate115200);" line331="        serial.setTxBufferSize(64)" line332="        serial.setRxBufferSize(64)" line333="        serial.readString()" line334="        serial.writeString('\n\n')" line335="    }" line336="" line337="    /**" line338="     * LCD Direction" line339="     * @param dir Direction; eg: 0" line340="     */" line341="    //% blockId=tabbyvision_lcd_direction block=&quot;LCD direction %dir&quot;" line342="    //% weight=99 group=&quot;Basic&quot;" line343="    export function lcdDirection(dir: LCD_Direction): void {" line344="        serial.writeLine(`K6 ${dir}`)" line345="    }" line346="" line347="    /**" line348="     * When button is pressed" line349="     * @param handler " line350="     */" line351="    //% blockId=tabbyvision_on_button_pressed block=&quot;on button |%btn pressed&quot;" line352="    //% weight=98 group=&quot;Basic&quot;" line353="    export function onButtonPressed(btn: BTNCmd, handler: () =&gt; void) {" line354="        control.onEvent(koiNewEventId, btn, handler);" line355="    }" line356="" line357="    /**" line358="     * Switch Function" line359="     * @param func Function; eg: LineFollower" line360="     */" line361="    //% blockId=tabbyvision_switch_function block=&quot;switch function %func&quot;" line362="    //% weight=97 group=&quot;Basic&quot;" line363="    //% func.fieldEditor=&quot;gridpicker&quot;" line364="    //% func.fieldOptions.columns=3" line365="    export function switchFunction(func: FullFunction): void {" line366="        serial.writeLine(`K97 ${func}`)" line367="    }" line368="" line369="    /**" line370="     * Enable Model + CV" line371="     * @param model Function; eg: FaceTracking" line372="     * @param cv Function; eg: ColorBlobTracking" line373="     */" line374="    //% blockId=tabbyvision_enable_model_cv block=&quot;enable model %model cv %cv&quot;" line375="    //% weight=96 group=&quot;Basic&quot;" line376="    //% model.fieldEditor=&quot;gridpicker&quot;" line377="    //% model.fieldOptions.columns=3" line378="    //% advanced=true" line379="    export function enableModelCV(model: ModelFunction, cv: CvFunction): void {" line380="        serial.writeLine(`K97 ${model+cv}`)" line381="    }" line382="" line383="" line384="    /**" line385="     * Color Blob Tracking Set Color" line386="     * @param color " line387="     */" line388="    //% blockId=tabbyvision_color_blob_tracking_set_color block=&quot;color blob tracking set color %color&quot;" line389="    //% color.shadow=&quot;colorNumberPicker&quot;" line390="    //% weight=90 group=&quot;Color blob tracking&quot;" line391="    export function colorObjectTrackingSetColor(color: ColorList): void {" line392="        serial.writeLine(`K18 ${color}`)" line393="    }" line394="" line395="    /**" line396="     * Color Blob Tracking Calibrate Color" line397="     */" line398="    //% blockId=tabbyvision_color_blob_tracking_calibrate block=&quot;color blob tracking calibrate&quot;" line399="    //% weight=90 group=&quot;Color blob tracking&quot;" line400="    export function colorObjectTrackingCalibrate(): void {" line401="        serial.writeLine(`K16`)" line402="    }" line403="" line404="    /**" line405="     * Color Blob Tracking Get Result" line406="     * @param res for color; eg: GetResult.result_X" line407="     */" line408="    //% block = &quot;color blob tracking get result %res&quot;" line409="    //% blockId=tabbyvision_color_blob_tracking_get_result" line410="    //% weight=89 group=&quot;Color blob tracking&quot;" line411="    //% res.fieldEditor=&quot;gridpicker&quot;" line412="    //% res.fieldOptions.columns=4" line413="" line414="    export function colorObjectTrackingGetPosition(res: GetResult): number {" line415="        return getResultXYWH(res)" line416="    }" line417="" line418="    /**" line419="     * Traffic Sign Is Class" line420="     * @returns class" line421="     */" line422="    //% block=&quot;traffic sign is class %tsclass&quot;" line423="    //% blockId=tabbyvision_traffic_sign_is_class" line424="    //% weight=80 group=&quot;Traffic sign&quot;" line425="    //% tsclass.fieldEditor=&quot;gridpicker&quot;" line426="    //% tsclass.fieldOptions.columns=2" line427="    export function trafficSignIsClass(tsclass: TrafficCard): boolean {" line428="        let traffic = [&quot;&quot;]" line429="        return _className == traffic[tsclass]" line430="    }" line431="" line432="    /**" line433="     * Traffic Sign Get Class" line434="     * @returns class" line435="     */" line436="    //% block=&quot;traffic sign get class&quot;" line437="    //% blockId=tabbyvision_traffic_sign_get_class" line438="    //% weight=80 group=&quot;Traffic sign&quot;" line439="    //% tsclass.fieldEditor=&quot;gridpicker&quot;" line440="    //% tsclass.fieldOptions.columns=2" line441="    export function trafficSignGetClass(): string {" line442="        return _className" line443="    }" line444="" line445="    /**" line446="     * Traffic Sign Get Position" line447="     * @returns position; eg: GetResult.result_X" line448="     */" line449="    //% blockId=tabbyvision_traffic_sign_get_position block=&quot;traffic sign get %res&quot;" line450="    //% weight=79 group=&quot;Traffic sign&quot;" line451="    export function trafficSignGetPosition(res: GetResult): number {" line452="        return getResultXYWH(res)" line453="    }" line454="" line455="    /**" line456="     * Line Follower Set Key Color" line457="     * @param color" line458="     */" line459="    //% blockId=tabbyvision_line_follower_set_threshold block=&quot;line follower set threshold %threshold&quot;" line460="    //% weight=70 group=&quot;Line follower&quot;" line461="    export function lineFollowerSetThreshold(key: ColorNames) {" line462="        serial.writeLine(`K19 ${key}`)" line463="    }" line464="" line465="    /**" line466="     * Line Follower Get Position" line467="     * @returns bias x" line468="     */" line469="    //% blockId=tabbyvision_line_follower_get_position block=&quot;line follower get %res&quot;" line470="    //% weight=69 group=&quot;Line follower&quot;" line471="    export function lineFollowerGetPosition(res: GetResultXY): number {" line472="        return getResultXY(res)" line473="    }" line474="" line475="    /**" line476="    * Face Tracking Get Position " line477="    */" line478="    //% block = &quot;face tracking get %res&quot;" line479="    //% blockId=tabbyvision_face_tracking_get_position" line480="    //% weight=60 group=&quot;Face tracking&quot;" line481="    export function faceTrackingGetPosition(res: GetResult): number {" line482="        return getResultXYWH(res)" line483="    }" line484="" line485="    /**" line486="    * Face Tracking Get Quantity" line487="    */" line488="    //% block = &quot;face tracking get quantity&quot;" line489="    //% blockId=tabbyvision_face_tracking_get_quantity" line490="    //% weight=60 group=&quot;Face tracking&quot;" line491="    export function faceTrackingGetQuantity(): number {" line492="        let transfer = _className" line493="        if (transfer==&quot;&quot;){" line494="            return 0" line495="        }" line496="        return parseInt(transfer)" line497="    }" line498="" line499="    /**" line500="     * Object Tracking is Class" line501="     * @param object VOC2012_Object; eg: VOC2012_Object.cat" line502="     */" line503="    //% block=&quot;object tracking is class %object&quot;" line504="    //% blockId=tabbyvision_object_tracking_is_class" line505="    //% weight=50 group=&quot;Object tracking&quot;" line506="    export function objectTrackingIsClass(obj: VOC2012_Object): boolean {" line507="        let objectList = [&quot;aeroplane&quot;, &quot;bicycle&quot;, &quot;bird&quot;, &quot;boat&quot;, &quot;bottle&quot;, &quot;bus&quot;, &quot;car&quot;, &quot;cat&quot;, &quot;chair&quot;, &quot;cow&quot;, &quot;diningtable&quot;, &quot;dog&quot;, &quot;horse&quot;, &quot;motorbike&quot;, &quot;person&quot;, &quot;pottedplant&quot;, &quot;sheep&quot;, &quot;sofa&quot;, &quot;train&quot;, &quot;tvmonitor&quot;]" line508="        return _className == objectList[obj]" line509="    }" line510="" line511="    /**" line512="     * Object Tracking Get Class" line513="     */" line514="    //% block=&quot;object tracking get class&quot;" line515="    //% blockId=tabbyvision_object_tracking_get_class" line516="    //% weight=50 group=&quot;Object tracking&quot;" line517="    export function objectTrackingGetClass(): string {" line518="        let ret52 = _className" line519="        return ret52" line520="    }" line521="" line522="    /**" line523="     * Object Tracking Get Position" line524="     * @param axis for x; eg: GetResult.result_X" line525="     * @returns position" line526="     */" line527="    //% blockId=tabbyvision_object_tracking_get_position block=&quot;object tracking get position %axis&quot;" line528="    //% weight=49 group=&quot;Object tracking&quot;" line529="    export function objectTrackingGetPosition(axis: GetResult): number {" line530="        return getResultXYWH(axis)" line531="    }" line532="" line533="    /**" line534="     * Classify Image Reset" line535="     */" line536="    //% blockId=tabbyvision_classify_image_reset block=&quot;classify image reset&quot;" line537="    //% weight=40 group=&quot;Classifier&quot;" line538="    export function classifyImageReset(): void {" line539="        serial.writeLine(`K45`)" line540="    }" line541="" line542="    /**" line543="     * Classify Image Add Tag" line544="     * @param name tag; eg: apple" line545="     */" line546="    //% blockId=tabbyvision_classify_image_add_tag block=&quot;classify image add tag %name&quot;" line547="    //% weight=39 group=&quot;Classifier&quot;" line548="    export function classifyImageAddTagID(name: string): void {" line549="        serial.writeLine(`K41 ${name}`)" line550="    }" line551="" line552="    /**" line553="     * Classify Image Get Class" line554="     * @returns class" line555="     */" line556="    //% blockId=tabbyvision_classify_image_get_class block=&quot;classify image get class&quot;" line557="    //% weight=38 group=&quot;Classifier&quot;" line558="    export function classifyImageGetClass(): string {" line559="        return getResultClass()" line560="    }" line561="" line562="    /**" line563="     * Classify Image Save" line564="     * @param path json to save; eg: model.json" line565="     */" line566="    //% blockId=tabbyvision_classify_image_save block=&quot;classify image save classifier %path&quot;" line567="    //% group=&quot;Classifier&quot; weight=35" line568="    export function classifyImageSave(path: string): void {" line569="        let str = `K43 ${path}`" line570="        serial.writeLine(str)" line571="    }" line572="" line573="    /**" line574="     * Classify Image Load" line575="     * @param path json to load; eg: model.json" line576="     */" line577="    //% blockId=tabbyvision_classify_image_load block=&quot;classify image load classifier %path&quot;" line578="    //% group=&quot;Classifier&quot; weight=34" line579="    export function classifyImageLoad(path: string): void {" line580="        let str2 = `K44 ${path}`" line581="        serial.writeLine(str2)" line582="    }" line583="" line584="" line585="    /**" line586="     * Number Recognition is Number" line587="     * @param number NumberCard; eg: NumberCard.6" line588="     */" line589="    //% block = &quot;number recognition number is %number&quot;" line590="    //% blockId=tabbyvision_number_recognition_is_number " line591="    //% weight=30 group=&quot;Number recognition&quot;" line592="    export function numberRecognitionIsNumber(num: NumberCard): boolean {" line593="        return getResultClass() == num.toString()" line594="    }" line595="" line596="    /**" line597="     * Number Recognition Get Number" line598="     */" line599="    //% block = &quot;number recognition get number &quot;" line600="    //% blockId=tabbyvision_number_recognition_get_number " line601="    //% weight=30 group=&quot;Number recognition&quot;" line602="    export function numberRecognitionGetNumber(): number {" line603="        let transfer2 = getResultClass()" line604="        if (transfer2 == ''){" line605="            return -1" line606="        }" line607="        return parseInt(transfer2)" line608="    }" line609="" line610="    /**" line611="    * Number Recognition Get Position" line612="    */" line613="    //% block = &quot;number recognition get %res&quot;" line614="    //% blockId=tabbyvision_number_recognition_get_position" line615="    //% weight=60 group=&quot;Number recognition&quot;" line616="    export function numberRecognitionGetPosition(res: GetResult): number {" line617="        return getResultXYWH(res)" line618="    }" line619="" line620="" line621="    /**" line622="     * Letter Recognition is Letter" line623="     * @param letter LetterCard; eg: LetterCard.6" line624="     */" line625="    //% block = &quot;letter recognition letter is %letter ?&quot;" line626="    //% blockId=tabbyvision_letter_recognition_is_letter " line627="    //% weight=30 group=&quot;Letter recognition&quot;" line628="    export function letterRecognitionIsLetter(letter: LetterCard): boolean {" line629="        let letterList = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;]" line630="        return getResultClass() == letterList[letter]" line631="    }" line632="" line633="    /**" line634="     * Letter Recognition Get Letter" line635="     */" line636="    //% block = &quot;letter recognition get letter &quot;" line637="    //% blockId=tabbyvision_letter_recognition_get_letter " line638="    //% weight=30 group=&quot;Letter recognition&quot;" line639="    export function letterRecognitionGetLetter(): string {" line640="        return getResultClass()" line641="    }" line642="    " line643="    /**" line644="    * Letter Recognition Get Position" line645="    */" line646="    //% block = &quot;letter recognition get %res&quot;" line647="    //% blockId=tabbyvision_letter_recognition_get_position" line648="    //% weight=60 group=&quot;Letter recognition&quot;" line649="    export function letterRecognitionGetPosition(res: GetResult): number {" line650="        return getResultXYWH(res)" line651="    }" line652="" line653="    /**" line654="     * @param ssid SSID; eg: ssid" line655="     * @param pass PASSWORD; eg: password" line656="     */" line657="    //% blockId=tabbyvision_join_ap block=&quot;Join Ap %ssid %pass&quot;" line658="    //% group=&quot;Wifi&quot; weight=50" line659="    export function tabbyvision_join_ap(ssid: string, pass: string) {" line660="        serial.writeLine(`K50 ${ssid} ${pass}`)" line661="        basic.pause(13000)" line662="    }" line663="" line664="    /**" line665="     * @param host Mqtt host; eg: iot.kittenbot.cn" line666="     * @param cid Client ID; eg: clientid" line667="     * @param port Host Port; eg: 1883" line668="     * @param user Username; eg: user" line669="     * @param pass Password; eg: pass" line670="     */" line671="    //% blockId=tabbyvision_mqtt_host block=&quot;Mqtt Host %host| clientID%cid||Port%port User%user Pass%pass&quot;" line672="    //% group=&quot;Wifi&quot; weight=46" line673="    export function tabbyvision_mqtt_host(" line674="        host: string," line675="        cid: string," line676="        port: number = 1883," line677="        user: string = null," line678="        pass: string = null" line679="    ) {" line680="        if (user &amp;&amp; pass) {" line681="            serial.writeLine(`K51 ${host} ${cid} ${port} ${user} ${pass}`)" line682="        } else {" line683="            serial.writeLine(`K51 ${host} ${cid} ${port}`)" line684="        }" line685="        basic.pause(2000)" line686="    }" line687="" line688="    /**" line689="     * @param topic Topic to subscribe; eg: /topic" line690="     */" line691="    //% blockId=tabbyvision_mqtt_sub block=&quot;Mqtt Subscribe %topic&quot;" line692="    //% group=&quot;Wifi&quot; weight=45" line693="    export function tabbyvision_mqtt_sub(topic: string) {" line694="        serial.writeLine(`K52 ${topic}`)" line695="        basic.pause(500)" line696="    }" line697="" line698="    /**" line699="     * @param topic Topic to publish; eg: /topic" line700="     * @param data Data to publish; eg: hello" line701="     */" line702="    //% blockId=tabbyvision_mqtt_pub block=&quot;Mqtt Publish %topic %data&quot;" line703="    //% group=&quot;Wifi&quot; weight=44" line704="    export function tabbyvision_mqtt_pub(topic: string, data: string) {" line705="        serial.writeLine(`K53 ${topic} ${data}`)" line706="    }" line707="" line708="    /**" line709="     * @param topic Mqtt Read; eg: /topic" line710="     */" line711="    //% blockId=tabbyvision_mqtt_read block=&quot;Mqtt Read %topic&quot;" line712="    //% group=&quot;Wifi&quot; weight=43" line713="    export function tabbyvision_mqtt_read(topic: string) {" line714="        topic = topic || ''" line715="        let str3 = `K55 ${topic}`" line716="        serial.writeLine(str3)" line717="        basic.pause(200)" line718="" line719="    }" line720="" line721="    //% blockId=tabbyvision_mqtt_onread block=&quot;on Mqtt Data&quot;" line722="    //% group=&quot;Wifi&quot; weight=42 draggableParameters=reporter" line723="    export function tabbyvision_mqtt_onread(" line724="        handler: (data: string, topic: string) =&gt; void" line725="    ) {" line726="        mqttDataEvt = handler" line727="    }" line728="}" numlines="729"></mutation></block></statement></block></xml>