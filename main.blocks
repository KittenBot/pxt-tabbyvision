<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="nU[^QPv:S2d0KyMtOYOM" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="jbfLDob$eo~R3o5:Kr*G" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tabbyvision {" line1="" line2="    // cached results" line3="    let _className: string = ''" line4="    let _posX: number = -1" line5="    let _posY: number = -1" line6="    let _posW: number = -1" line7="    let _posH: number = -1" line8="" line9="" line10="    export enum LCD_Direction {" line11="        //% block=Front" line12="        Front = 0," line13="        //% block=Back" line14="        Back = 2" line15="    }" line16="" line17="    export enum ModelFunction {" line18="        //% block=TrafficSign" line19="        TrafficSign = 0x1," line20="        //% block=ObjectTracking" line21="        ObjectTracking = 0x2," line22="        //% block=FaceTracking" line23="        FaceTracking = 0x3," line24="        //% block=NumberRecognition" line25="        NumberRecognition = 0x4," line26="        //% block=ClassifyImage" line27="        ClassifyImage = 0x5," line28="    }" line29="" line30="    export enum CvFunction {" line31="        //% block=ColorBlobTracking" line32="        ColorBlobTracking = 0x10," line33="        //% block=LineFollower" line34="        LineFollower = 0x20," line35="    }" line36="" line37="    export enum FullFunction {" line38="        //% block=TrafficSign" line39="        TrafficSign = 0x1," line40="        //% block=ObjectTracking" line41="        ObjectTracking = 0x2," line42="        //% block=FaceTracking" line43="        FaceTracking = 0x3," line44="        //% block=NumberRecognition" line45="        NumberRecognition = 0x4," line46="        //% block=ClassifyImage" line47="        ClassifyImage = 0x5," line48="        //% block=ColorBlobTracking" line49="        ColorBlobTracking = 0x10," line50="        //% block=LineFollower" line51="        LineFollower = 0x20," line52="    }" line53="" line54="    export enum ColorNames {" line55="        //% block=red" line56="        red = 1," line57="        //% block=blue" line58="        blue = 2," line59="        //% block=yellow" line60="        yellow = 3," line61="    }" line62="" line63="" line64="" line65="    /*" line66="    * VOC2012_Object Card" line67="    */" line68="" line69="    export enum VOC2012_Object {" line70="        //% block=nothing" line71="        nothing = -1," line72="        //% block=aeroplane" line73="        aeroplane = 0," line74="        //% block=bicycle" line75="        bicycle = 1," line76="        //% block=bird" line77="        bird = 2," line78="        //% block=boat" line79="        boat = 3," line80="        //% block=bottle" line81="        bottle = 4," line82="        //% block=bus" line83="        bus = 5," line84="        //% block=car" line85="        car = 6," line86="        //% block=cat" line87="        cat = 7," line88="        //% block=chair" line89="        chair = 8," line90="        //% block=cow" line91="        cow = 9," line92="        //% block=diningtable" line93="        diningtable = 10," line94="        //% block=dog" line95="        dog = 11," line96="        //% block=horse" line97="        horse = 12," line98="        //% block=motorbike" line99="        motorbike = 13," line100="        //% block=person" line101="        person = 14," line102="        //% block=pottedplant" line103="        pottedplant = 15," line104="        //% block=sheep" line105="        sheep = 16," line106="        //% block=sofa" line107="        sofa = 17," line108="        //% block=train" line109="        train = 18," line110="        //% block=tvmonitor" line111="        tvmonitor = 19," line112="    }" line113="" line114="    /*" line115="    * Traffic sign Card" line116="    */" line117="    export enum TrafficCard {" line118="        //% block=&quot;Forward&quot;" line119="        forward = 1," line120="        //% block=&quot;Turn around&quot;" line121="        turnaround = 2," line122="        //% block=&quot;Left&quot;" line123="        left = 3," line124="        //% block=&quot;Right&quot;" line125="        right = 4," line126="        //% block=&quot;Stop&quot;" line127="        stop = 5," line128="        //% block=&quot;Speed limit&quot;" line129="        speedlimit = 6," line130="        //% block=&quot;Tunnel&quot;" line131="        tunnel = 7" line132="    }" line133="" line134="    /**" line135="    * Number Card" line136="    */" line137="    export enum NumberCard {" line138="        //% block=&quot;0&quot;" line139="        zero = 0," line140="        //% block=&quot;1&quot;" line141="        one = 1," line142="        //% block=&quot;2&quot;" line143="        two = 2," line144="        //% block=&quot;3&quot;" line145="        three = 3," line146="        //% block=&quot;4&quot;" line147="        four = 4," line148="        //% block=&quot;5&quot;" line149="        five = 5," line150="        //% block=&quot;6&quot;" line151="        six = 6," line152="        //% block=&quot;7&quot;" line153="        seven = 7," line154="        //% block=&quot;8&quot;" line155="        eight = 8," line156="        //% block=&quot;9&quot;" line157="        nine = 9" line158="    }" line159="" line160="    /**" line161="    * Result list" line162="    */" line163="    export enum GetResult {" line164="        //% block=&quot;X&quot;" line165="        result_X = 1," line166="        //% block=&quot;Y&quot;" line167="        result_Y = 2," line168="        //% block=&quot;W&quot;" line169="        result_W = 3," line170="        //% block=&quot;H&quot;" line171="        result_H = 4" line172="    }" line173="" line174="    /**" line175="     * Result XY" line176="     */" line177="    export enum GetResultXY {" line178="        //% block=&quot;X&quot;" line179="        result_X = 1," line180="        //% block=&quot;Y&quot;" line181="        result_Y = 2" line182="    }" line183="" line184="" line185="" line186="" line187="    let btnEvent: (btn: number) =&gt; void" line188="" line189="    function trim(n: string): string {" line190="        while (n.charCodeAt(n.length - 1) &lt; 0x1f) {" line191="            n = n.slice(0, n.length - 1)" line192="        }" line193="        return n" line194="    }" line195="" line196="    serial.onDataReceived('\n', function () {" line197="        let a = serial.readUntil('\n')" line198="        if (a.charAt(0) == 'K') {" line199="            a = trim(a)" line200="            let b = a.slice(1, a.length).split(' ')" line201="            let cmd = parseInt(b[0])" line202="            if (cmd == 42) { // feature extraction" line203="                _className = b[1]" line204="            } else if (cmd == 31) { // face tracking" line205="                _posX = parseInt(b[1])" line206="                _posY = parseInt(b[2])" line207="                _posW = parseInt(b[3])" line208="                _posH = parseInt(b[4])" line209="                _className = b[5]" line210="            } else if (cmd == 15) { // color blob tracking" line211="                _posX = parseInt(b[1])" line212="                _posY = parseInt(b[2])" line213="                _posW = parseInt(b[3])" line214="                _posH = parseInt(b[4])" line215="            } else if (cmd == 19) { // line follower color" line216="                _posX = parseInt(b[1])" line217="                _posY = parseInt(b[2])" line218="            } else if (cmd == 81) { // traffic sign" line219="                _className = b[5]" line220="            } else if (cmd == 83) { // number recognition" line221="                _className = b[5]" line222="            }" line223="        }" line224="    })" line225="" line226="    function getResultXYWH(res: GetResult): number {" line227="        let ret = -1" line228="        if (res == GetResult.result_X) {" line229="            ret = _posX" line230="            _posX = -1" line231="        } else if (res == GetResult.result_Y) {" line232="            ret = _posY" line233="            _posY = -1" line234="        } else if (res == GetResult.result_W) {" line235="            ret = _posW" line236="            _posW = -1" line237="        } else if (res == GetResult.result_H) {" line238="            ret = _posH" line239="            _posH = -1" line240="        }" line241="        return ret" line242="    }" line243="" line244="    function getResultXY(res: GetResultXY): number {" line245="        let ret2 = -1" line246="        if (res == GetResultXY.result_X) {" line247="            ret2 = _posX" line248="            _posX = -1" line249="        } else if (res == GetResultXY.result_Y) {" line250="            ret2 = _posY" line251="            _posY = -1" line252="        }" line253="        return ret2" line254="    }" line255="" line256="    function getResultClass(): string {" line257="        let ret3 = _className" line258="        _className = ''" line259="        return ret3" line260="    }" line261="" line262="" line263="    /**" line264="     * Init the tabbyvision library with serial connection" line265="     * @param tx Tx pin; eg: SerialPin.P13" line266="     * @param rx Rx pin; eg: SerialPin.P14" line267="     */" line268="    //% blockId=tabbyvision_init block=&quot;init tabbyvision Tx %tx Rx %rx&quot;" line269="    //% weight=100 group=&quot;Basic&quot;" line270="    export function init(tx: SerialPin, rx: SerialPin): void {" line271="        serial.redirect(tx, rx, BaudRate.BaudRate115200);" line272="        serial.setTxBufferSize(64)" line273="        serial.setRxBufferSize(64)" line274="        serial.readString()" line275="        serial.writeString('\n\n')" line276="    }" line277="" line278="    /**" line279="     * LCD Direction" line280="     * @param dir Direction; eg: 0" line281="     */" line282="    //% blockId=tabbyvision_lcd_direction block=&quot;LCD direction %dir&quot;" line283="    //% weight=99 group=&quot;Basic&quot;" line284="    export function lcdDirection(dir: LCD_Direction): void {" line285="        serial.writeLine(`K6 ${dir}`)" line286="    }" line287="" line288="    /**" line289="     * When button is pressed" line290="     * @param handler " line291="     */" line292="    //% blockId=tabbyvision_on_button_pressed block=&quot;on button pressed&quot;" line293="    //% weight=98 group=&quot;Basic&quot;" line294="    export function onButtonPressed(handler: () =&gt; void): void {" line295="        btnEvent = handler" line296="    }" line297="" line298="    /**" line299="     * Switch Function" line300="     * @param func Function; eg: LineFollower" line301="     */" line302="    //% blockId=tabbyvision_switch_function block=&quot;switch function %func&quot;" line303="    //% weight=97 group=&quot;Basic&quot;" line304="    //% func.fieldEditor=&quot;gridpicker&quot;" line305="    //% func.fieldOptions.columns=3" line306="    export function switchFunction(func: FullFunction): void {" line307="        serial.writeLine(`K97 ${func}`)" line308="    }" line309="" line310="    /**" line311="     * Enable Model + CV" line312="     * @param model Function; eg: FaceTracking" line313="     * @param cv Function; eg: ColorBlobTracking" line314="     */" line315="    //% blockId=tabbyvision_enable_model_cv block=&quot;enable model %model cv %cv&quot;" line316="    //% weight=96 group=&quot;Basic&quot;" line317="    //% model.fieldEditor=&quot;gridpicker&quot;" line318="    //% model.fieldOptions.columns=3" line319="    //% advanced=true" line320="    export function enableModelCV(model: ModelFunction, cv: CvFunction): void {" line321="        serial.writeLine(`K97 ${model+cv}`)" line322="    }" line323="" line324="" line325="    /**" line326="     * Color Blob Tracking Set Color" line327="     * @param color " line328="     */" line329="    //% blockId=tabbyvision_color_blob_tracking_set_color block=&quot;color blob tracking set color %color&quot;" line330="    //% color.shadow=&quot;colorNumberPicker&quot;" line331="    //% weight=90 group=&quot;Color blob tracking&quot;" line332="    export function colorObjectTrackingSetColor(color: number): void {" line333="        serial.writeLine(`K18 ${color}`)" line334="    }" line335="" line336="    /**" line337="     * Color Blob Tracking Get Result" line338="     * @param res for color; eg: GetResult.result_X" line339="     */" line340="    //% block = &quot;color blob tracking get result %res&quot;" line341="    //% blockId=tabbyvision_color_blob_tracking_get_result" line342="    //% weight=89 group=&quot;Color blob tracking&quot;" line343="    //% res.fieldEditor=&quot;gridpicker&quot;" line344="    //% res.fieldOptions.columns=4" line345="" line346="    export function colorObjectTrackingGetPosition(res: GetResult): number {" line347="        return getResultXYWH(res)" line348="    }" line349="" line350="    /**" line351="     * Traffic Sign Get Class" line352="     * @returns class" line353="     */" line354="    //% block=&quot;traffic sign get class:%tsclass&quot;" line355="    //% blockId=tabbyvision_traffic_sign_get_class" line356="    //% weight=80 group=&quot;Traffic sign&quot;" line357="    //% tsclass.fieldEditor=&quot;gridpicker&quot;" line358="    //% tsclass.fieldOptions.columns=2" line359="    export function trafficSignGetClass(tsclass: TrafficCard): boolean {" line360="        let ret4 = _className == tsclass.toString()" line361="        _className = ''" line362="        return ret4" line363="    }" line364="" line365="    /**" line366="     * Traffic Sign Get Position" line367="     * @returns position; eg: GetResult.result_X" line368="     */" line369="    //% blockId=tabbyvision_traffic_sign_get_position block=&quot;traffic sign get position&quot;" line370="    //% weight=79 group=&quot;Traffic sign&quot;" line371="    export function trafficSignGetPosition(res: GetResult): number {" line372="        return getResultXYWH(res)" line373="    }" line374="" line375="    /**" line376="     * Line Follower Set Key Color" line377="     * @param color" line378="     */" line379="    //% blockId=tabbyvision_line_follower_set_threshold block=&quot;line follower set threshold %threshold&quot;" line380="    //% weight=70 group=&quot;Line follower&quot;" line381="    export function lineFollowerSetThreshold(key: ColorNames) {" line382="        serial.writeLine(`K19 ${key}`)" line383="    }" line384="" line385="    /**" line386="     * Line Follower Get Position" line387="     * @returns bias x" line388="     */" line389="    //% blockId=tabbyvision_line_follower_get_position block=&quot;line follower get position&quot;" line390="    //% weight=69 group=&quot;Line follower&quot;" line391="    export function lineFollowerGetPosition(res: GetResultXY): number {" line392="        return getResultXY(res)" line393="    }" line394="" line395="    /**" line396="    * Face Tracking Get Position " line397="    */" line398="    //% block = &quot;face tracking get %res&quot;" line399="    //% blockId=tabbyvision_face_tracking_get_position" line400="    //% weight=60 group=&quot;Face tracking&quot;" line401="    export function faceTrackingGetPosition(res: GetResult): number {" line402="        return getResultXYWH(res)" line403="    }" line404="" line405="    /**" line406="     * Object Tracking Get Class" line407="     * @param object VOC2012_Object; eg: VOC2012_Object.cat" line408="     */" line409="    //% block=&quot;object tracking get class: %object&quot;" line410="    //% blockId=tabbyvision_object_tracking_get_class" line411="    //% weight=50 group=&quot;Object tracking&quot;" line412="    export function objectTrackingGetClass(object: VOC2012_Object): boolean {" line413="        let ret5 = _className == object.toString()" line414="        return ret5" line415="    }" line416="" line417="    /**" line418="     * Object Tracking Get Position" line419="     * @param axis for x; eg: GetResult.result_X" line420="     * @returns position" line421="     */" line422="    //% blockId=tabbyvision_object_tracking_get_position block=&quot;object tracking get position %axis&quot;" line423="    //% weight=49 group=&quot;Object tracking&quot;" line424="    export function objectTrackingGetPosition(axis: GetResult): number {" line425="        return getResultXYWH(axis)" line426="    }" line427="" line428="    /**" line429="     * Classify Image Reset" line430="     */" line431="    //% blockId=tabbyvision_classify_image_reset block=&quot;classify image reset&quot;" line432="    //% weight=40 group=&quot;Classifier&quot;" line433="    export function classifyImageReset(): void {" line434="        serial.writeLine(`K45`)" line435="    }" line436="" line437="    /**" line438="     * Classify Image Add Tag" line439="     * @param name tag; eg: apple" line440="     */" line441="    //% blockId=tabbyvision_classify_image_add_tag block=&quot;classify image add tag %name&quot;" line442="    //% weight=39 group=&quot;Classifier&quot;" line443="    export function classifyImageAddTagID(name: string): void {" line444="        serial.writeLine(`K41 ${name}`)" line445="    }" line446="" line447="    /**" line448="     * Classify Image Get Class" line449="     * @returns class" line450="     */" line451="    //% blockId=tabbyvision_classify_image_get_class block=&quot;classify image get class&quot;" line452="    //% weight=38 group=&quot;Classifier&quot;" line453="    export function classifyImageGetClass(): string {" line454="        return getResultClass()" line455="    }" line456="" line457="    /**" line458="     * Classify Image Save" line459="     * @param path json to save; eg: model.json" line460="     */" line461="    //% blockId=tabbyvision_classify_image_save block=&quot;classify image save classifier %path&quot;" line462="    //% group=&quot;Classifier&quot; weight=35" line463="    export function classifyImageSave(path: string): void {" line464="        let str = `K43 ${path}`" line465="        serial.writeLine(str)" line466="    }" line467="" line468="    /**" line469="     * Classify Image Load" line470="     * @param path json to load; eg: model.json" line471="     */" line472="    //% blockId=tabbyvision_classify_image_load block=&quot;classify image load classifier %path&quot;" line473="    //% group=&quot;Classifier&quot; weight=34" line474="    export function classifyImageLoad(path: string): void {" line475="        let str2 = `K44 ${path}`" line476="        serial.writeLine(str2)" line477="    }" line478="" line479="" line480="    /**" line481="     * Number Recognition Get Number" line482="     * @param number NumberCard; eg: NumberCard.6" line483="     */" line484="    //% block = &quot;number recognition get number %number &quot;" line485="    //% blockId=tabbyvision_number_recognition_get_number " line486="    //% weight=30 group=&quot;Number recognition&quot;" line487="    export function numberRecognitionGetNumber(number: NumberCard): boolean {" line488="        return getResultClass() == number.toString()" line489="    }" line490="" line491="}" numlines="492"></mutation></block></statement></block></xml>