<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="y@G[~80~*QSvSHU)6%7(" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="$2S!zcac8~dmvE773hd?" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tabbyvision {" line1="" line2="    let koiNewEventId = 1228" line3="    type Evtss = (t1: string, t2: string) =&gt; void" line4="    let mqttDataEvt: Evtss = null" line5="" line6="    // cached results" line7="    let _className: string = ''" line8="    let _posX: number = -1" line9="    let _posY: number = -1" line10="    let _posW: number = -1" line11="    let _posH: number = -1" line12="    let lineX1: number = -1" line13="    let lineY1: number = -1" line14="    let lineX2: number = -1" line15="    let lineY2: number = -1" line16="" line17="" line18="    export enum LCD_Direction {" line19="        //% block=Front" line20="        Front = 0," line21="        //% block=Back" line22="        Back = 2" line23="    }" line24="" line25="    export enum BTNCmd {" line26="        //% block=&quot;A&quot;" line27="        A = 1," line28="        //% block=&quot;B&quot;" line29="        B = 2," line30="        //% block=&quot;A+B&quot;" line31="        AB = 3" line32="    }" line33="" line34="    export enum ColorList {" line35="        //% block=&quot;Red&quot;" line36="        Red = 0," line37="        //% block=&quot;Blue&quot;" line38="        Blue = 1," line39="        //% block=&quot;Green&quot;" line40="        Green = 2," line41="        //% block=&quot;Yellow&quot;" line42="        Yellow = 3," line43="        //% block=&quot;Orange&quot;" line44="        Orange = 4," line45="        //% block=&quot;Purple&quot;" line46="        Purple = 5," line47="        //% block=&quot;Pink&quot;" line48="        Pink = 6," line49="        //% block=&quot;White&quot;" line50="        White = 7," line51="        //% block=&quot;Black&quot;" line52="        Black = 8," line53="        //% block=&quot;Custom&quot;" line54="        Custom = 9," line55="    }" line56="" line57="" line58="    export enum ModelFunction {" line59="        //% block=TrafficSign" line60="        TrafficSign = 0x1," line61="        //% block=ObjectTracking" line62="        ObjectTracking = 0x2," line63="        //% block=FaceTracking" line64="        FaceTracking = 0x3," line65="        //% block=NumberRecognition" line66="        NumberRecognition = 0x4," line67="        //% block=ClassifyImage" line68="        ClassifyImage = 0x5," line69="        //% block=LetterRecognition" line70="        LetterRecognition = 0x6,   " line71="    }" line72="" line73="    export enum CvFunction {" line74="        //% block=ColorBlobTracking" line75="        ColorBlobTracking = 0x10," line76="        //% block=LineFollower" line77="        LineFollower = 0x20," line78="    }" line79="" line80="    export enum FullFunction {" line81="        //% block=TrafficSign" line82="        TrafficSign = 0x1," line83="        //% block=ObjectTracking" line84="        ObjectTracking = 0x2," line85="        //% block=FaceTracking" line86="        FaceTracking = 0x3," line87="        //% block=NumberRecognition" line88="        NumberRecognition = 0x4," line89="        //% block=ClassifyImage" line90="        ClassifyImage = 0x5," line91="        //% block=LetterRecognition" line92="        LetterRecognition = 0x6," line93="        //% block=ColorBlobTracking" line94="        ColorBlobTracking = 0x10," line95="        //% block=LineFollower" line96="        LineFollower = 0x20," line97="        //% block=Iot" line98="        Iot = 0x80," line99="    }" line100="" line101="    export enum ColorNames {" line102="        //% block=red" line103="        red = 1," line104="        //% block=blue" line105="        blue = 2," line106="        //% block=yellow" line107="        yellow = 3," line108="        //% block=black" line109="        black = 4," line110="    }" line111="" line112="" line113="" line114="    /*" line115="    * VOC2012_Object Card" line116="    */" line117="" line118="    export enum VOC2012_Object {" line119="        //% block=aeroplane" line120="        aeroplane = 0," line121="        //% block=bicycle" line122="        bicycle = 1," line123="        //% block=bird" line124="        bird = 2," line125="        //% block=boat" line126="        boat = 3," line127="        //% block=bottle" line128="        bottle = 4," line129="        //% block=bus" line130="        bus = 5," line131="        //% block=car" line132="        car = 6," line133="        //% block=cat" line134="        cat = 7," line135="        //% block=chair" line136="        chair = 8," line137="        //% block=cow" line138="        cow = 9," line139="        //% block=diningtable" line140="        diningtable = 10," line141="        //% block=dog" line142="        dog = 11," line143="        //% block=horse" line144="        horse = 12," line145="        //% block=motorbike" line146="        motorbike = 13," line147="        //% block=person" line148="        person = 14," line149="        //% block=pottedplant" line150="        pottedplant = 15," line151="        //% block=sheep" line152="        sheep = 16," line153="        //% block=sofa" line154="        sofa = 17," line155="        //% block=train" line156="        train = 18," line157="        //% block=tvmonitor" line158="        tvmonitor = 19," line159="    }" line160="" line161="    /*" line162="    * Traffic sign Card" line163="    */" line164="    export enum TrafficCard {" line165="        //% block=&quot;Around&quot;" line166="        Around = 0," line167="        //% block=&quot;Forward&quot;" line168="        Forward = 1," line169="        //% block=&quot;Left&quot;" line170="        left = 2," line171="        //% block=&quot;Right&quot;" line172="        Right = 3," line173="        //% block=&quot;Limiting30&quot;" line174="        Limiting30 = 4," line175="        //% block=&quot;Stop&quot;" line176="        Stop = 5," line177="        //% block=&quot;Tunnel&quot;" line178="        Tunnel = 6" line179="    }" line180="" line181="    /**" line182="    * Number Card" line183="    */" line184="    export enum NumberCard {" line185="        //% block=&quot;0&quot;" line186="        zero = 0," line187="        //% block=&quot;1&quot;" line188="        one = 1," line189="        //% block=&quot;2&quot;" line190="        two = 2," line191="        //% block=&quot;3&quot;" line192="        three = 3," line193="        //% block=&quot;4&quot;" line194="        four = 4," line195="        //% block=&quot;5&quot;" line196="        five = 5," line197="        //% block=&quot;6&quot;" line198="        six = 6," line199="        //% block=&quot;7&quot;" line200="        seven = 7," line201="        //% block=&quot;8&quot;" line202="        eight = 8," line203="        //% block=&quot;9&quot;" line204="        nine = 9" line205="    }" line206="    /**" line207="    * Letter Card" line208="    */" line209="    export enum LetterCard {" line210="        //% block=&quot;A&quot;" line211="        A = 0," line212="        //% block=&quot;B&quot;" line213="        B = 1," line214="        //% block=&quot;C&quot;" line215="        C = 2," line216="        //% block=&quot;D&quot;" line217="        D = 3," line218="        //% block=&quot;E&quot;" line219="        E = 4," line220="        //% block=&quot;F&quot;" line221="        F = 5" line222="    }" line223="" line224="    /**" line225="    * Result list" line226="    */" line227="    export enum GetResult {" line228="        //% block=&quot;X&quot;" line229="        result_X = 1," line230="        //% block=&quot;Y&quot;" line231="        result_Y = 2," line232="        //% block=&quot;W&quot;" line233="        result_W = 3," line234="        //% block=&quot;H&quot;" line235="        result_H = 4" line236="    }" line237="" line238="    /**" line239="     * Result XY" line240="     */" line241="    export enum GetResultXY {" line242="        //% block=&quot;X&quot;" line243="        result_X = 1," line244="        //% block=&quot;Y&quot;" line245="        result_Y = 2" line246="    }" line247="" line248="    /**" line249="     * Result line" line250="     */" line251="    export enum Getline {" line252="        //% block=&quot;X1&quot;" line253="        result_X1 = 1," line254="        //% block=&quot;Y1&quot;" line255="        result_Y1 = 2," line256="        //% block=&quot;X2&quot;" line257="        result_X2 = 3," line258="        //% block=&quot;Y2&quot;" line259="        result_Y2 = 4" line260="    }" line261="" line262="" line263="" line264="" line265="    let btnEvent: (btn: number) =&gt; void" line266="" line267="    function trim(n: string): string {" line268="        while (n.charCodeAt(n.length - 1) &lt; 0x1f) {" line269="            n = n.slice(0, n.length - 1)" line270="        }" line271="        return n" line272="    }" line273="" line274="    let modelCmd: number[] = [31,81,82,83,84];" line275="    serial.onDataReceived('\n', function () {" line276="        let a = serial.readUntil('\n')" line277="        if (a.charAt(0) == 'K') {" line278="            a = trim(a)" line279="            let b = a.slice(1, a.length).split(' ')" line280="            let cmd = parseInt(b[0])" line281="            if (cmd == 42) { // feature extraction" line282="                _className = b[1]" line283="            } else if (cmd == 15) { // color blob tracking" line284="                _posX = parseInt(b[1])" line285="                _posY = parseInt(b[2])" line286="                _posW = parseInt(b[3])" line287="                _posH = parseInt(b[4])" line288="            } else if (cmd == 19) { // line follower color" line289="                _posX = parseInt(b[1])" line290="                _posY = parseInt(b[2])" line291="            } else if (modelCmd.indexOf(cmd) != -1) { // model cmd" line292="                _posX = parseInt(b[1])" line293="                _posY = parseInt(b[2])" line294="                _posW = parseInt(b[3])" line295="                _posH = parseInt(b[4])" line296="                _className = b[5]" line297="            } else if (cmd == 3) { // btn" line298="                control.raiseEvent(koiNewEventId, parseInt(b[1]))" line299="            } else if (cmd == 55) { // btn" line300="                if (mqttDataEvt) {" line301="                    mqttDataEvt(b[1], b[2])" line302="                }" line303="            }" line304="        }" line305="    })" line306="" line307="    function getResultXYWH(res: GetResult): number {" line308="        let ret = -1" line309="        if (res == GetResult.result_X) {" line310="            ret = _posX" line311="            _posX = -1" line312="        } else if (res == GetResult.result_Y) {" line313="            ret = _posY" line314="            _posY = -1" line315="        } else if (res == GetResult.result_W) {" line316="            ret = _posW" line317="            _posW = -1" line318="        } else if (res == GetResult.result_H) {" line319="            ret = _posH" line320="            _posH = -1" line321="        }" line322="        return ret" line323="    }" line324="" line325="    function getResultXY(res: GetResultXY): number {" line326="        let ret2 = -1" line327="        if (res == GetResultXY.result_X) {" line328="            ret2 = _posX" line329="            _posX = -1" line330="        } else if (res == GetResultXY.result_Y) {" line331="            ret2 = _posY" line332="            _posY = -1" line333="        }" line334="        return ret2" line335="    }" line336="" line337="    function getResultClass(): string {" line338="        let ret3 = _className" line339="        _className = ''" line340="        return ret3" line341="    }" line342="" line343="    function getlineXY(res: Getline): number {" line344="        let ret4 = -1" line345="        if (res == Getline.result_X1) {" line346="            ret4 = lineX1" line347="            lineX1 = -1" line348="        } else if (res == Getline.result_Y1) {" line349="            ret4 = lineY1" line350="            lineY1 = -1" line351="        } else if (res == Getline.result_X2) {" line352="            ret4 = lineX2" line353="            lineX2 = -1" line354="        } else if (res == Getline.result_Y2) {" line355="            ret4 = lineY2" line356="            lineY1 = -1" line357="        }" line358="        return ret4" line359="    }" line360="" line361="" line362="    /**" line363="     * Init the tabbyvision library with serial connection" line364="     * @param tx Tx pin; eg: SerialPin.P13" line365="     * @param rx Rx pin; eg: SerialPin.P14" line366="     */" line367="    //% blockId=tabbyvision_init block=&quot;init tabbyvision Tx %tx Rx %rx&quot;" line368="    //% weight=100 group=&quot;Basic&quot;" line369="    export function init(tx: SerialPin, rx: SerialPin): void {" line370="        serial.redirect(tx, rx, BaudRate.BaudRate115200);" line371="        serial.setTxBufferSize(64)" line372="        serial.setRxBufferSize(64)" line373="        serial.readString()" line374="        serial.writeString('\n\n')" line375="    }" line376="" line377="    /**" line378="     * LCD Direction" line379="     * @param dir Direction; eg: 0" line380="     */" line381="    //% blockId=tabbyvision_lcd_direction block=&quot;LCD direction %dir&quot;" line382="    //% weight=99 group=&quot;Basic&quot;" line383="    export function lcdDirection(dir: LCD_Direction): void {" line384="        serial.writeLine(`K6 ${dir}`)" line385="    }" line386="" line387="    /**" line388="     * When button is pressed" line389="     * @param handler " line390="     */" line391="    //% blockId=tabbyvision_on_button_pressed block=&quot;on button |%btn pressed&quot;" line392="    //% weight=98 group=&quot;Basic&quot;" line393="    export function onButtonPressed(btn: BTNCmd, handler: () =&gt; void) {" line394="        control.onEvent(koiNewEventId, btn, handler);" line395="    }" line396="" line397="    /**" line398="     * Switch Function" line399="     * @param func Function; eg: LineFollower" line400="     */" line401="    //% blockId=tabbyvision_switch_function block=&quot;switch function %func&quot;" line402="    //% weight=97 group=&quot;Basic&quot;" line403="    //% func.fieldEditor=&quot;gridpicker&quot;" line404="    //% func.fieldOptions.columns=3" line405="    export function switchFunction(func: FullFunction): void {" line406="        serial.writeLine(`K97 ${func}`)" line407="    }" line408="" line409="    /**" line410="     * Enable Model + CV" line411="     * @param model Function; eg: FaceTracking" line412="     * @param cv Function; eg: ColorBlobTracking" line413="     */" line414="    //% blockId=tabbyvision_enable_model_cv block=&quot;enable model %model cv %cv&quot;" line415="    //% weight=96 group=&quot;Basic&quot;" line416="    //% model.fieldEditor=&quot;gridpicker&quot;" line417="    //% model.fieldOptions.columns=3" line418="    //% advanced=true" line419="    export function enableModelCV(model: ModelFunction, cv: CvFunction): void {" line420="        serial.writeLine(`K97 ${model+cv}`)" line421="    }" line422="" line423="" line424="    /**" line425="     * Color Blob Tracking Set Color" line426="     * @param color " line427="     */" line428="    //% blockId=tabbyvision_color_blob_tracking_set_color block=&quot;color blob tracking set color %color&quot;" line429="    //% color.shadow=&quot;colorNumberPicker&quot;" line430="    //% weight=90 group=&quot;Color blob tracking&quot;" line431="    export function colorObjectTrackingSetColor(color: ColorList): void {" line432="        serial.writeLine(`K18 ${color}`)" line433="    }" line434="" line435="    /**" line436="     * Color Blob Tracking Calibrate Color" line437="     */" line438="    //% blockId=tabbyvision_color_blob_tracking_calibrate block=&quot;color blob tracking calibrate&quot;" line439="    //% weight=90 group=&quot;Color blob tracking&quot;" line440="    export function colorObjectTrackingCalibrate(): void {" line441="        serial.writeLine(`K16`)" line442="    }" line443="" line444="    /**" line445="     * Color Blob Tracking Get Result" line446="     * @param res for color; eg: GetResult.result_X" line447="     */" line448="    //% block = &quot;color blob tracking get result %res&quot;" line449="    //% blockId=tabbyvision_color_blob_tracking_get_result" line450="    //% weight=89 group=&quot;Color blob tracking&quot;" line451="    //% res.fieldEditor=&quot;gridpicker&quot;" line452="    //% res.fieldOptions.columns=4" line453="" line454="    export function colorObjectTrackingGetPosition(res: GetResult): number {" line455="        return getResultXYWH(res)" line456="    }" line457="" line458="    /**" line459="     * Traffic Sign Is Class" line460="     * @returns class" line461="     */" line462="    //% block=&quot;traffic sign is class %tsclass&quot;" line463="    //% blockId=tabbyvision_traffic_sign_is_class" line464="    //% weight=80 group=&quot;Traffic sign&quot;" line465="    //% tsclass.fieldEditor=&quot;gridpicker&quot;" line466="    //% tsclass.fieldOptions.columns=2" line467="    export function trafficSignIsClass(tsclass: TrafficCard): boolean {" line468="        let traffic = [&quot;around&quot;,&quot;forward&quot;,&quot;left&quot;,&quot;right&quot;,&quot;limiting30&quot;,&quot;stop&quot;,&quot;tunnel&quot;]" line469="        return _className == traffic[tsclass]" line470="    }" line471="" line472="    /**" line473="     * Traffic Sign Get Class" line474="     * @returns class" line475="     */" line476="    //% block=&quot;traffic sign get class&quot;" line477="    //% blockId=tabbyvision_traffic_sign_get_class" line478="    //% weight=80 group=&quot;Traffic sign&quot;" line479="    //% tsclass.fieldEditor=&quot;gridpicker&quot;" line480="    //% tsclass.fieldOptions.columns=2" line481="    export function trafficSignGetClass(): string {" line482="        return _className" line483="    }" line484="" line485="    /**" line486="     * Traffic Sign Get Position" line487="     * @returns position; eg: GetResult.result_X" line488="     */" line489="    //% blockId=tabbyvision_traffic_sign_get_position block=&quot;traffic sign get %res&quot;" line490="    //% weight=79 group=&quot;Traffic sign&quot;" line491="    export function trafficSignGetPosition(res: GetResult): number {" line492="        return getResultXYWH(res)" line493="    }" line494="" line495="    /**" line496="     * Line Follower Set Key Color" line497="     * @param color" line498="     */" line499="    //% blockId=tabbyvision_line_follower_set_threshold block=&quot;line follower set threshold %threshold&quot;" line500="    //% weight=70 group=&quot;Line follower&quot;" line501="    export function lineFollowerSetThreshold(key: ColorNames) {" line502="        serial.writeLine(`K18 ${key}`)" line503="    }" line504="" line505="    /**" line506="     * Line Follower Get Position" line507="     * @returns bias x" line508="     */" line509="    //% blockId=tabbyvision_line_follower_get_position block=&quot;line follower get %res&quot;" line510="    //% weight=69 group=&quot;Line follower&quot;" line511="    export function lineFollowerGetPosition(res: Getline): number {" line512="        return getlineXY(res)" line513="    }" line514="" line515="    /**" line516="    * Face Tracking Get Position " line517="    */" line518="    //% block = &quot;face tracking get %res&quot;" line519="    //% blockId=tabbyvision_face_tracking_get_position" line520="    //% weight=60 group=&quot;Face tracking&quot;" line521="    export function faceTrackingGetPosition(res: GetResult): number {" line522="        return getResultXYWH(res)" line523="    }" line524="" line525="    /**" line526="    * Face Tracking Get Quantity" line527="    */" line528="    //% block = &quot;face tracking get quantity&quot;" line529="    //% blockId=tabbyvision_face_tracking_get_quantity" line530="    //% weight=60 group=&quot;Face tracking&quot;" line531="    export function faceTrackingGetQuantity(): number {" line532="        let transfer = _className" line533="        if (transfer==&quot;&quot;){" line534="            return 0" line535="        }" line536="        return parseInt(transfer)" line537="    }" line538="" line539="    /**" line540="     * Object Tracking is Class" line541="     * @param object VOC2012_Object; eg: VOC2012_Object.cat" line542="     */" line543="    //% block=&quot;object tracking is class %object&quot;" line544="    //% blockId=tabbyvision_object_tracking_is_class" line545="    //% weight=50 group=&quot;Object tracking&quot;" line546="    export function objectTrackingIsClass(obj: VOC2012_Object): boolean {" line547="        let objectList = [&quot;aeroplane&quot;, &quot;bicycle&quot;, &quot;bird&quot;, &quot;boat&quot;, &quot;bottle&quot;, &quot;bus&quot;, &quot;car&quot;, &quot;cat&quot;, &quot;chair&quot;, &quot;cow&quot;, &quot;diningtable&quot;, &quot;dog&quot;, &quot;horse&quot;, &quot;motorbike&quot;, &quot;person&quot;, &quot;pottedplant&quot;, &quot;sheep&quot;, &quot;sofa&quot;, &quot;train&quot;, &quot;tvmonitor&quot;]" line548="        return _className == objectList[obj]" line549="    }" line550="" line551="    /**" line552="     * Object Tracking Get Class" line553="     */" line554="    //% block=&quot;object tracking get class&quot;" line555="    //% blockId=tabbyvision_object_tracking_get_class" line556="    //% weight=50 group=&quot;Object tracking&quot;" line557="    export function objectTrackingGetClass(): string {" line558="        let ret52 = _className" line559="        return ret52" line560="    }" line561="" line562="    /**" line563="     * Object Tracking Get Position" line564="     * @param axis for x; eg: GetResult.result_X" line565="     * @returns position" line566="     */" line567="    //% blockId=tabbyvision_object_tracking_get_position block=&quot;object tracking get position %axis&quot;" line568="    //% weight=49 group=&quot;Object tracking&quot;" line569="    export function objectTrackingGetPosition(axis: GetResult): number {" line570="        return getResultXYWH(axis)" line571="    }" line572="" line573="    /**" line574="     * Classify Image Reset" line575="     */" line576="    //% blockId=tabbyvision_classify_image_reset block=&quot;classify image reset&quot;" line577="    //% weight=40 group=&quot;Classifier&quot;" line578="    export function classifyImageReset(): void {" line579="        serial.writeLine(`K45`)" line580="    }" line581="" line582="    /**" line583="     * Classify Image Add Tag" line584="     * @param name tag; eg: apple" line585="     */" line586="    //% blockId=tabbyvision_classify_image_add_tag block=&quot;classify image add tag %name&quot;" line587="    //% weight=39 group=&quot;Classifier&quot;" line588="    export function classifyImageAddTagID(name: string): void {" line589="        serial.writeLine(`K41 ${name}`)" line590="    }" line591="" line592="    /**" line593="     * Classify Image Get Class" line594="     * @returns class" line595="     */" line596="    //% blockId=tabbyvision_classify_image_get_class block=&quot;classify image get class&quot;" line597="    //% weight=38 group=&quot;Classifier&quot;" line598="    export function classifyImageGetClass(): string {" line599="        return getResultClass()" line600="    }" line601="" line602="    /**" line603="     * Classify Image Save" line604="     * @param path json to save; eg: model.json" line605="     */" line606="    //% blockId=tabbyvision_classify_image_save block=&quot;classify image save classifier %path&quot;" line607="    //% group=&quot;Classifier&quot; weight=35" line608="    export function classifyImageSave(path: string): void {" line609="        let str = `K43 ${path}`" line610="        serial.writeLine(str)" line611="    }" line612="" line613="    /**" line614="     * Classify Image Load" line615="     * @param path json to load; eg: model.json" line616="     */" line617="    //% blockId=tabbyvision_classify_image_load block=&quot;classify image load classifier %path&quot;" line618="    //% group=&quot;Classifier&quot; weight=34" line619="    export function classifyImageLoad(path: string): void {" line620="        let str2 = `K44 ${path}`" line621="        serial.writeLine(str2)" line622="    }" line623="" line624="" line625="    /**" line626="     * Number Recognition is Number" line627="     * @param number NumberCard; eg: NumberCard.6" line628="     */" line629="    //% block = &quot;number recognition number is %number&quot;" line630="    //% blockId=tabbyvision_number_recognition_is_number " line631="    //% weight=30 group=&quot;Number recognition&quot;" line632="    export function numberRecognitionIsNumber(num: NumberCard): boolean {" line633="        return getResultClass() == num.toString()" line634="    }" line635="" line636="    /**" line637="     * Number Recognition Get Number" line638="     */" line639="    //% block = &quot;number recognition get number &quot;" line640="    //% blockId=tabbyvision_number_recognition_get_number " line641="    //% weight=30 group=&quot;Number recognition&quot;" line642="    export function numberRecognitionGetNumber(): number {" line643="        let transfer2 = getResultClass()" line644="        if (transfer2 == ''){" line645="            return -1" line646="        }" line647="        return parseInt(transfer2)" line648="    }" line649="" line650="    /**" line651="    * Number Recognition Get Position" line652="    */" line653="    //% block = &quot;number recognition get %res&quot;" line654="    //% blockId=tabbyvision_number_recognition_get_position" line655="    //% weight=60 group=&quot;Number recognition&quot;" line656="    export function numberRecognitionGetPosition(res: GetResult): number {" line657="        return getResultXYWH(res)" line658="    }" line659="" line660="" line661="    /**" line662="     * Letter Recognition is Letter" line663="     * @param letter LetterCard; eg: LetterCard.6" line664="     */" line665="    //% block = &quot;letter recognition letter is %letter ?&quot;" line666="    //% blockId=tabbyvision_letter_recognition_is_letter " line667="    //% weight=30 group=&quot;Letter recognition&quot;" line668="    export function letterRecognitionIsLetter(letter: LetterCard): boolean {" line669="        let letterList = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;]" line670="        return getResultClass() == letterList[letter]" line671="    }" line672="" line673="    /**" line674="     * Letter Recognition Get Letter" line675="     */" line676="    //% block = &quot;letter recognition get letter &quot;" line677="    //% blockId=tabbyvision_letter_recognition_get_letter " line678="    //% weight=30 group=&quot;Letter recognition&quot;" line679="    export function letterRecognitionGetLetter(): string {" line680="        return getResultClass()" line681="    }" line682="    " line683="    /**" line684="    * Letter Recognition Get Position" line685="    */" line686="    //% block = &quot;letter recognition get %res&quot;" line687="    //% blockId=tabbyvision_letter_recognition_get_position" line688="    //% weight=60 group=&quot;Letter recognition&quot;" line689="    export function letterRecognitionGetPosition(res: GetResult): number {" line690="        return getResultXYWH(res)" line691="    }" line692="" line693="    /**" line694="     * @param ssid SSID; eg: ssid" line695="     * @param pass PASSWORD; eg: password" line696="     */" line697="    //% blockId=tabbyvision_join_ap block=&quot;Join Ap %ssid %pass&quot;" line698="    //% group=&quot;Wifi&quot; weight=50" line699="    export function tabbyvision_join_ap(ssid: string, pass: string) {" line700="        serial.writeLine(`K50 ${ssid} ${pass}`)" line701="        basic.pause(13000)" line702="    }" line703="" line704="    /**" line705="     * @param host Mqtt host; eg: iot.kittenbot.cn" line706="     * @param cid Client ID; eg: clientid" line707="     * @param port Host Port; eg: 1883" line708="     * @param user Username; eg: user" line709="     * @param pass Password; eg: pass" line710="     */" line711="    //% blockId=tabbyvision_mqtt_host block=&quot;Mqtt Host %host| clientID%cid||Port%port User%user Pass%pass&quot;" line712="    //% group=&quot;Wifi&quot; weight=46" line713="    export function tabbyvision_mqtt_host(" line714="        host: string," line715="        cid: string," line716="        port: number = 1883," line717="        user: string = null," line718="        pass: string = null" line719="    ) {" line720="        if (user &amp;&amp; pass) {" line721="            serial.writeLine(`K51 ${host} ${cid} ${port} ${user} ${pass}`)" line722="        } else {" line723="            serial.writeLine(`K51 ${host} ${cid} ${port}`)" line724="        }" line725="        basic.pause(2000)" line726="    }" line727="" line728="    /**" line729="     * @param topic Topic to subscribe; eg: /topic" line730="     */" line731="    //% blockId=tabbyvision_mqtt_sub block=&quot;Mqtt Subscribe %topic&quot;" line732="    //% group=&quot;Wifi&quot; weight=45" line733="    export function tabbyvision_mqtt_sub(topic: string) {" line734="        serial.writeLine(`K52 ${topic}`)" line735="        basic.pause(500)" line736="    }" line737="" line738="    /**" line739="     * @param topic Topic to publish; eg: /topic" line740="     * @param data Data to publish; eg: hello" line741="     */" line742="    //% blockId=tabbyvision_mqtt_pub block=&quot;Mqtt Publish %topic %data&quot;" line743="    //% group=&quot;Wifi&quot; weight=44" line744="    export function tabbyvision_mqtt_pub(topic: string, data: string) {" line745="        serial.writeLine(`K53 ${topic} ${data}`)" line746="    }" line747="" line748="    /**" line749="     * @param topic Mqtt Read; eg: /topic" line750="     */" line751="    //% blockId=tabbyvision_mqtt_read block=&quot;Mqtt Read %topic&quot;" line752="    //% group=&quot;Wifi&quot; weight=43" line753="    export function tabbyvision_mqtt_read(topic: string) {" line754="        topic = topic || ''" line755="        let str3 = `K55 ${topic}`" line756="        serial.writeLine(str3)" line757="        basic.pause(200)" line758="" line759="    }" line760="" line761="    //% blockId=tabbyvision_mqtt_onread block=&quot;on Mqtt Data&quot;" line762="    //% group=&quot;Wifi&quot; weight=42 draggableParameters=reporter" line763="    export function tabbyvision_mqtt_onread(" line764="        handler: (data: string, topic: string) =&gt; void" line765="    ) {" line766="        mqttDataEvt = handler" line767="    }" line768="}" numlines="769"></mutation></block></statement></block></xml>