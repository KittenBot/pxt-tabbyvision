<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="ny!)m+j[?Zdy6hbb*d^]" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="yf%P]lw$Z3OSiqYyC{;}" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tabbyvision {" line1="" line2="    let koiNewEventId = 1228" line3="" line4="    // cached results" line5="    let _className: string = ''" line6="    let _posX: number = -1" line7="    let _posY: number = -1" line8="    let _posW: number = -1" line9="    let _posH: number = -1" line10="" line11="" line12="    export enum LCD_Direction {" line13="        //% block=Front" line14="        Front = 0," line15="        //% block=Back" line16="        Back = 2" line17="    }" line18="" line19="    export enum BTNCmd {" line20="        //% block=&quot;A&quot;" line21="        A = 1," line22="        //% block=&quot;B&quot;" line23="        B = 2," line24="        //% block=&quot;A+B&quot;" line25="        AB = 3" line26="    }" line27="" line28="    export enum ColorList {" line29="        //% block=&quot;Red&quot;" line30="        Red = 0," line31="        //% block=&quot;Blue&quot;" line32="        Blue = 1," line33="        //% block=&quot;Green&quot;" line34="        Green = 2," line35="        //% block=&quot;Yellow&quot;" line36="        Yellow = 3," line37="        //% block=&quot;Orange&quot;" line38="        Orange = 4," line39="        //% block=&quot;Purple&quot;" line40="        Purple = 5," line41="        //% block=&quot;Pink&quot;" line42="        Pink = 6," line43="        //% block=&quot;White&quot;" line44="        White = 7," line45="        //% block=&quot;Black&quot;" line46="        Black = 8," line47="        //% block=&quot;Custom&quot;" line48="        Custom = 9," line49="    }" line50="" line51="" line52="    export enum ModelFunction {" line53="        //% block=TrafficSign" line54="        TrafficSign = 0x1," line55="        //% block=ObjectTracking" line56="        ObjectTracking = 0x2," line57="        //% block=FaceTracking" line58="        FaceTracking = 0x3," line59="        //% block=NumberRecognition" line60="        NumberRecognition = 0x4," line61="        //% block=ClassifyImage" line62="        ClassifyImage = 0x5," line63="        //% block=LetterRecognition" line64="        LetterRecognition = 0x6,   " line65="    }" line66="" line67="    export enum CvFunction {" line68="        //% block=ColorBlobTracking" line69="        ColorBlobTracking = 0x10," line70="        //% block=LineFollower" line71="        LineFollower = 0x20," line72="    }" line73="" line74="    export enum FullFunction {" line75="        //% block=TrafficSign" line76="        TrafficSign = 0x1," line77="        //% block=ObjectTracking" line78="        ObjectTracking = 0x2," line79="        //% block=FaceTracking" line80="        FaceTracking = 0x3," line81="        //% block=NumberRecognition" line82="        NumberRecognition = 0x4," line83="        //% block=ClassifyImage" line84="        ClassifyImage = 0x5," line85="        //% block=LetterRecognition" line86="        LetterRecognition = 0x6," line87="        //% block=ColorBlobTracking" line88="        ColorBlobTracking = 0x10," line89="        //% block=LineFollower" line90="        LineFollower = 0x20," line91="    }" line92="" line93="    export enum ColorNames {" line94="        //% block=red" line95="        red = 1," line96="        //% block=blue" line97="        blue = 2," line98="        //% block=yellow" line99="        yellow = 3," line100="    }" line101="" line102="" line103="" line104="    /*" line105="    * VOC2012_Object Card" line106="    */" line107="" line108="    export enum VOC2012_Object {" line109="        //% block=aeroplane" line110="        aeroplane = 0," line111="        //% block=bicycle" line112="        bicycle = 1," line113="        //% block=bird" line114="        bird = 2," line115="        //% block=boat" line116="        boat = 3," line117="        //% block=bottle" line118="        bottle = 4," line119="        //% block=bus" line120="        bus = 5," line121="        //% block=car" line122="        car = 6," line123="        //% block=cat" line124="        cat = 7," line125="        //% block=chair" line126="        chair = 8," line127="        //% block=cow" line128="        cow = 9," line129="        //% block=diningtable" line130="        diningtable = 10," line131="        //% block=dog" line132="        dog = 11," line133="        //% block=horse" line134="        horse = 12," line135="        //% block=motorbike" line136="        motorbike = 13," line137="        //% block=person" line138="        person = 14," line139="        //% block=pottedplant" line140="        pottedplant = 15," line141="        //% block=sheep" line142="        sheep = 16," line143="        //% block=sofa" line144="        sofa = 17," line145="        //% block=train" line146="        train = 18," line147="        //% block=tvmonitor" line148="        tvmonitor = 19," line149="    }" line150="" line151="    /*" line152="    * Traffic sign Card" line153="    */" line154="    export enum TrafficCard {" line155="        //% block=&quot;Forward&quot;" line156="        forward = 1," line157="        //% block=&quot;Turn around&quot;" line158="        turnaround = 2," line159="        //% block=&quot;Left&quot;" line160="        left = 3," line161="        //% block=&quot;Right&quot;" line162="        right = 4," line163="        //% block=&quot;Stop&quot;" line164="        stop = 5," line165="        //% block=&quot;Speed limit&quot;" line166="        speedlimit = 6," line167="        //% block=&quot;Tunnel&quot;" line168="        tunnel = 7" line169="    }" line170="" line171="    /**" line172="    * Number Card" line173="    */" line174="    export enum NumberCard {" line175="        //% block=&quot;0&quot;" line176="        zero = 0," line177="        //% block=&quot;1&quot;" line178="        one = 1," line179="        //% block=&quot;2&quot;" line180="        two = 2," line181="        //% block=&quot;3&quot;" line182="        three = 3," line183="        //% block=&quot;4&quot;" line184="        four = 4," line185="        //% block=&quot;5&quot;" line186="        five = 5," line187="        //% block=&quot;6&quot;" line188="        six = 6," line189="        //% block=&quot;7&quot;" line190="        seven = 7," line191="        //% block=&quot;8&quot;" line192="        eight = 8," line193="        //% block=&quot;9&quot;" line194="        nine = 9" line195="    }" line196="    /**" line197="    * Letter Card" line198="    */" line199="    export enum LetterCard {" line200="        //% block=&quot;A&quot;" line201="        A = 0," line202="        //% block=&quot;B&quot;" line203="        B = 1," line204="        //% block=&quot;C&quot;" line205="        C = 2," line206="        //% block=&quot;D&quot;" line207="        D = 3," line208="        //% block=&quot;E&quot;" line209="        E = 4," line210="        //% block=&quot;F&quot;" line211="        F = 5" line212="    }" line213="" line214="    /**" line215="    * Result list" line216="    */" line217="    export enum GetResult {" line218="        //% block=&quot;X&quot;" line219="        result_X = 1," line220="        //% block=&quot;Y&quot;" line221="        result_Y = 2," line222="        //% block=&quot;W&quot;" line223="        result_W = 3," line224="        //% block=&quot;H&quot;" line225="        result_H = 4" line226="    }" line227="" line228="    /**" line229="     * Result XY" line230="     */" line231="    export enum GetResultXY {" line232="        //% block=&quot;X&quot;" line233="        result_X = 1," line234="        //% block=&quot;Y&quot;" line235="        result_Y = 2" line236="    }" line237="" line238="" line239="" line240="" line241="    let btnEvent: (btn: number) =&gt; void" line242="" line243="    function trim(n: string): string {" line244="        while (n.charCodeAt(n.length - 1) &lt; 0x1f) {" line245="            n = n.slice(0, n.length - 1)" line246="        }" line247="        return n" line248="    }" line249="" line250="    let modelCmd: number[] = [31,81,82,83,84];" line251="    serial.onDataReceived('\n', function () {" line252="        let a = serial.readUntil('\n')" line253="        if (a.charAt(0) == 'K') {" line254="            a = trim(a)" line255="            let b = a.slice(1, a.length).split(' ')" line256="            let cmd = parseInt(b[0])" line257="            if (cmd == 42) { // feature extraction" line258="                _className = b[1]" line259="            } else if (cmd == 15) { // color blob tracking" line260="                _posX = parseInt(b[1])" line261="                _posY = parseInt(b[2])" line262="                _posW = parseInt(b[3])" line263="                _posH = parseInt(b[4])" line264="            } else if (cmd == 19) { // line follower color" line265="                _posX = parseInt(b[1])" line266="                _posY = parseInt(b[2])" line267="            } else if (modelCmd.indexOf(cmd) != -1) { // model cmd" line268="                _posX = parseInt(b[1])" line269="                _posY = parseInt(b[2])" line270="                _posW = parseInt(b[3])" line271="                _posH = parseInt(b[4])" line272="                _className = b[5]" line273="            } else if (cmd == 3) { // btn" line274="                control.raiseEvent(koiNewEventId, parseInt(b[1]))" line275="            }" line276="        }" line277="    })" line278="" line279="    function getResultXYWH(res: GetResult): number {" line280="        let ret = -1" line281="        if (res == GetResult.result_X) {" line282="            ret = _posX" line283="            _posX = -1" line284="        } else if (res == GetResult.result_Y) {" line285="            ret = _posY" line286="            _posY = -1" line287="        } else if (res == GetResult.result_W) {" line288="            ret = _posW" line289="            _posW = -1" line290="        } else if (res == GetResult.result_H) {" line291="            ret = _posH" line292="            _posH = -1" line293="        }" line294="        return ret" line295="    }" line296="" line297="    function getResultXY(res: GetResultXY): number {" line298="        let ret2 = -1" line299="        if (res == GetResultXY.result_X) {" line300="            ret2 = _posX" line301="            _posX = -1" line302="        } else if (res == GetResultXY.result_Y) {" line303="            ret2 = _posY" line304="            _posY = -1" line305="        }" line306="        return ret2" line307="    }" line308="" line309="    function getResultClass(): string {" line310="        let ret3 = _className" line311="        _className = ''" line312="        return ret3" line313="    }" line314="" line315="" line316="    /**" line317="     * Init the tabbyvision library with serial connection" line318="     * @param tx Tx pin; eg: SerialPin.P13" line319="     * @param rx Rx pin; eg: SerialPin.P14" line320="     */" line321="    //% blockId=tabbyvision_init block=&quot;init tabbyvision Tx %tx Rx %rx&quot;" line322="    //% weight=100 group=&quot;Basic&quot;" line323="    export function init(tx: SerialPin, rx: SerialPin): void {" line324="        serial.redirect(tx, rx, BaudRate.BaudRate115200);" line325="        serial.setTxBufferSize(64)" line326="        serial.setRxBufferSize(64)" line327="        serial.readString()" line328="        serial.writeString('\n\n')" line329="    }" line330="" line331="    /**" line332="     * LCD Direction" line333="     * @param dir Direction; eg: 0" line334="     */" line335="    //% blockId=tabbyvision_lcd_direction block=&quot;LCD direction %dir&quot;" line336="    //% weight=99 group=&quot;Basic&quot;" line337="    export function lcdDirection(dir: LCD_Direction): void {" line338="        serial.writeLine(`K6 ${dir}`)" line339="    }" line340="" line341="    /**" line342="     * When button is pressed" line343="     * @param handler " line344="     */" line345="    //% blockId=tabbyvision_on_button_pressed block=&quot;on button |%btn pressed&quot;" line346="    //% weight=98 group=&quot;Basic&quot;" line347="    export function onButtonPressed(btn: BTNCmd, handler: () =&gt; void) {" line348="        control.onEvent(koiNewEventId, btn, handler);" line349="    }" line350="" line351="    /**" line352="     * Switch Function" line353="     * @param func Function; eg: LineFollower" line354="     */" line355="    //% blockId=tabbyvision_switch_function block=&quot;switch function %func&quot;" line356="    //% weight=97 group=&quot;Basic&quot;" line357="    //% func.fieldEditor=&quot;gridpicker&quot;" line358="    //% func.fieldOptions.columns=3" line359="    export function switchFunction(func: FullFunction): void {" line360="        serial.writeLine(`K97 ${func}`)" line361="    }" line362="" line363="    /**" line364="     * Enable Model + CV" line365="     * @param model Function; eg: FaceTracking" line366="     * @param cv Function; eg: ColorBlobTracking" line367="     */" line368="    //% blockId=tabbyvision_enable_model_cv block=&quot;enable model %model cv %cv&quot;" line369="    //% weight=96 group=&quot;Basic&quot;" line370="    //% model.fieldEditor=&quot;gridpicker&quot;" line371="    //% model.fieldOptions.columns=3" line372="    //% advanced=true" line373="    export function enableModelCV(model: ModelFunction, cv: CvFunction): void {" line374="        serial.writeLine(`K97 ${model+cv}`)" line375="    }" line376="" line377="" line378="    /**" line379="     * Color Blob Tracking Set Color" line380="     * @param color " line381="     */" line382="    //% blockId=tabbyvision_color_blob_tracking_set_color block=&quot;color blob tracking set color %color&quot;" line383="    //% color.shadow=&quot;colorNumberPicker&quot;" line384="    //% weight=90 group=&quot;Color blob tracking&quot;" line385="    export function colorObjectTrackingSetColor(color: ColorList): void {" line386="        serial.writeLine(`K18 ${color}`)" line387="    }" line388="" line389="    /**" line390="     * Color Blob Tracking Calibrate Color" line391="     */" line392="    //% blockId=tabbyvision_color_blob_tracking_calibrate block=&quot;color blob tracking calibrate&quot;" line393="    //% weight=90 group=&quot;Color blob tracking&quot;" line394="    export function colorObjectTrackingCalibrate(): void {" line395="        serial.writeLine(`K16`)" line396="    }" line397="" line398="    /**" line399="     * Color Blob Tracking Get Result" line400="     * @param res for color; eg: GetResult.result_X" line401="     */" line402="    //% block = &quot;color blob tracking get result %res&quot;" line403="    //% blockId=tabbyvision_color_blob_tracking_get_result" line404="    //% weight=89 group=&quot;Color blob tracking&quot;" line405="    //% res.fieldEditor=&quot;gridpicker&quot;" line406="    //% res.fieldOptions.columns=4" line407="" line408="    export function colorObjectTrackingGetPosition(res: GetResult): number {" line409="        return getResultXYWH(res)" line410="    }" line411="" line412="    /**" line413="     * Traffic Sign Is Class" line414="     * @returns class" line415="     */" line416="    //% block=&quot;traffic sign is class %tsclass&quot;" line417="    //% blockId=tabbyvision_traffic_sign_is_class" line418="    //% weight=80 group=&quot;Traffic sign&quot;" line419="    //% tsclass.fieldEditor=&quot;gridpicker&quot;" line420="    //% tsclass.fieldOptions.columns=2" line421="    export function trafficSignIsClass(tsclass: TrafficCard): boolean {" line422="        let traffic = [&quot;&quot;]" line423="        return _className == traffic[tsclass]" line424="    }" line425="" line426="    /**" line427="     * Traffic Sign Get Class" line428="     * @returns class" line429="     */" line430="    //% block=&quot;traffic sign get class&quot;" line431="    //% blockId=tabbyvision_traffic_sign_get_class" line432="    //% weight=80 group=&quot;Traffic sign&quot;" line433="    //% tsclass.fieldEditor=&quot;gridpicker&quot;" line434="    //% tsclass.fieldOptions.columns=2" line435="    export function trafficSignGetClass(): string {" line436="        return _className" line437="    }" line438="" line439="    /**" line440="     * Traffic Sign Get Position" line441="     * @returns position; eg: GetResult.result_X" line442="     */" line443="    //% blockId=tabbyvision_traffic_sign_get_position block=&quot;traffic sign get %res&quot;" line444="    //% weight=79 group=&quot;Traffic sign&quot;" line445="    export function trafficSignGetPosition(res: GetResult): number {" line446="        return getResultXYWH(res)" line447="    }" line448="" line449="    /**" line450="     * Line Follower Set Key Color" line451="     * @param color" line452="     */" line453="    //% blockId=tabbyvision_line_follower_set_threshold block=&quot;line follower set threshold %threshold&quot;" line454="    //% weight=70 group=&quot;Line follower&quot;" line455="    export function lineFollowerSetThreshold(key: ColorNames) {" line456="        serial.writeLine(`K19 ${key}`)" line457="    }" line458="" line459="    /**" line460="     * Line Follower Get Position" line461="     * @returns bias x" line462="     */" line463="    //% blockId=tabbyvision_line_follower_get_position block=&quot;line follower get position&quot;" line464="    //% weight=69 group=&quot;Line follower&quot;" line465="    export function lineFollowerGetPosition(res: GetResultXY): number {" line466="        return getResultXY(res)" line467="    }" line468="" line469="    /**" line470="    * Face Tracking Get Position " line471="    */" line472="    //% block = &quot;face tracking get %res&quot;" line473="    //% blockId=tabbyvision_face_tracking_get_position" line474="    //% weight=60 group=&quot;Face tracking&quot;" line475="    export function faceTrackingGetPosition(res: GetResult): number {" line476="        return getResultXYWH(res)" line477="    }" line478="" line479="    /**" line480="    * Face Tracking Get Quantity" line481="    */" line482="    //% block = &quot;face tracking get quantity&quot;" line483="    //% blockId=tabbyvision_face_tracking_get_quantity" line484="    //% weight=60 group=&quot;Face tracking&quot;" line485="    export function faceTrackingGetQuantity(): number {" line486="        let transfer = _className" line487="        if (transfer==&quot;&quot;){" line488="            return 0" line489="        }" line490="        return parseInt(transfer)" line491="    }" line492="" line493="    /**" line494="     * Object Tracking is Class" line495="     * @param object VOC2012_Object; eg: VOC2012_Object.cat" line496="     */" line497="    //% block=&quot;object tracking is class %object&quot;" line498="    //% blockId=tabbyvision_object_tracking_is_class" line499="    //% weight=50 group=&quot;Object tracking&quot;" line500="    export function objectTrackingIsClass(obj: VOC2012_Object): boolean {" line501="        let objectList = [&quot;aeroplane&quot;, &quot;bicycle&quot;, &quot;bird&quot;, &quot;boat&quot;, &quot;bottle&quot;, &quot;bus&quot;, &quot;car&quot;, &quot;cat&quot;, &quot;chair&quot;, &quot;cow&quot;, &quot;diningtable&quot;, &quot;dog&quot;, &quot;horse&quot;, &quot;motorbike&quot;, &quot;person&quot;, &quot;pottedplant&quot;, &quot;sheep&quot;, &quot;sofa&quot;, &quot;train&quot;, &quot;tvmonitor&quot;]" line502="        return _className == objectList[obj]" line503="    }" line504="" line505="    /**" line506="     * Object Tracking Get Class" line507="     */" line508="    //% block=&quot;object tracking get class&quot;" line509="    //% blockId=tabbyvision_object_tracking_get_class" line510="    //% weight=50 group=&quot;Object tracking&quot;" line511="    export function objectTrackingGetClass(): string {" line512="        let ret52 = _className" line513="        return ret52" line514="    }" line515="" line516="    /**" line517="     * Object Tracking Get Position" line518="     * @param axis for x; eg: GetResult.result_X" line519="     * @returns position" line520="     */" line521="    //% blockId=tabbyvision_object_tracking_get_position block=&quot;object tracking get position %axis&quot;" line522="    //% weight=49 group=&quot;Object tracking&quot;" line523="    export function objectTrackingGetPosition(axis: GetResult): number {" line524="        return getResultXYWH(axis)" line525="    }" line526="" line527="    /**" line528="     * Classify Image Reset" line529="     */" line530="    //% blockId=tabbyvision_classify_image_reset block=&quot;classify image reset&quot;" line531="    //% weight=40 group=&quot;Classifier&quot;" line532="    export function classifyImageReset(): void {" line533="        serial.writeLine(`K45`)" line534="    }" line535="" line536="    /**" line537="     * Classify Image Add Tag" line538="     * @param name tag; eg: apple" line539="     */" line540="    //% blockId=tabbyvision_classify_image_add_tag block=&quot;classify image add tag %name&quot;" line541="    //% weight=39 group=&quot;Classifier&quot;" line542="    export function classifyImageAddTagID(name: string): void {" line543="        serial.writeLine(`K41 ${name}`)" line544="    }" line545="" line546="    /**" line547="     * Classify Image Get Class" line548="     * @returns class" line549="     */" line550="    //% blockId=tabbyvision_classify_image_get_class block=&quot;classify image get class&quot;" line551="    //% weight=38 group=&quot;Classifier&quot;" line552="    export function classifyImageGetClass(): string {" line553="        return getResultClass()" line554="    }" line555="" line556="    /**" line557="     * Classify Image Save" line558="     * @param path json to save; eg: model.json" line559="     */" line560="    //% blockId=tabbyvision_classify_image_save block=&quot;classify image save classifier %path&quot;" line561="    //% group=&quot;Classifier&quot; weight=35" line562="    export function classifyImageSave(path: string): void {" line563="        let str = `K43 ${path}`" line564="        serial.writeLine(str)" line565="    }" line566="" line567="    /**" line568="     * Classify Image Load" line569="     * @param path json to load; eg: model.json" line570="     */" line571="    //% blockId=tabbyvision_classify_image_load block=&quot;classify image load classifier %path&quot;" line572="    //% group=&quot;Classifier&quot; weight=34" line573="    export function classifyImageLoad(path: string): void {" line574="        let str2 = `K44 ${path}`" line575="        serial.writeLine(str2)" line576="    }" line577="" line578="" line579="    /**" line580="     * Number Recognition is Number" line581="     * @param number NumberCard; eg: NumberCard.6" line582="     */" line583="    //% block = &quot;number recognition number is %number&quot;" line584="    //% blockId=tabbyvision_number_recognition_is_number " line585="    //% weight=30 group=&quot;Number recognition&quot;" line586="    export function numberRecognitionIsNumber(num: NumberCard): boolean {" line587="        return getResultClass() == num.toString()" line588="    }" line589="" line590="    /**" line591="     * Number Recognition Get Number" line592="     */" line593="    //% block = &quot;number recognition get number &quot;" line594="    //% blockId=tabbyvision_number_recognition_get_number " line595="    //% weight=30 group=&quot;Number recognition&quot;" line596="    export function numberRecognitionGetNumber(): number {" line597="        let transfer2 = getResultClass()" line598="        if (transfer2 == ''){" line599="            return -1" line600="        }" line601="        return parseInt(transfer2)" line602="    }" line603="" line604="    /**" line605="    * Number Recognition Get Position" line606="    */" line607="    //% block = &quot;number recognition get %res&quot;" line608="    //% blockId=tabbyvision_number_recognition_get_position" line609="    //% weight=60 group=&quot;Number recognition&quot;" line610="    export function numberRecognitionGetPosition(res: GetResult): number {" line611="        return getResultXYWH(res)" line612="    }" line613="" line614="" line615="    /**" line616="     * Letter Recognition is Letter" line617="     * @param letter LetterCard; eg: LetterCard.6" line618="     */" line619="    //% block = &quot;letter recognition letter is %letter ?&quot;" line620="    //% blockId=tabbyvision_letter_recognition_is_letter " line621="    //% weight=30 group=&quot;Letter recognition&quot;" line622="    export function letterRecognitionIsLetter(letter: LetterCard): boolean {" line623="        let letterList = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;]" line624="        return getResultClass() == letterList[letter]" line625="    }" line626="" line627="    /**" line628="     * Letter Recognition Get Letter" line629="     */" line630="    //% block = &quot;letter recognition get letter &quot;" line631="    //% blockId=tabbyvision_letter_recognition_get_letter " line632="    //% weight=30 group=&quot;Letter recognition&quot;" line633="    export function letterRecognitionGetLetter(): string {" line634="        return getResultClass()" line635="    }" line636="    " line637="    /**" line638="    * Letter Recognition Get Position" line639="    */" line640="    //% block = &quot;letter recognition get %res&quot;" line641="    //% blockId=tabbyvision_letter_recognition_get_position" line642="    //% weight=60 group=&quot;Letter recognition&quot;" line643="    export function letterRecognitionGetPosition(res: GetResult): number {" line644="        return getResultXYWH(res)" line645="    }" line646="" line647="}" numlines="648"></mutation></block></statement></block></xml>