<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="_|rP,@14+o6k4bFFu*(J" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="cVd9cf[WFt53Meva4jgY" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tabbyvision {" line1="" line2="    let koiNewEventId = 1228" line3="" line4="    // cached results" line5="    let _className: string = ''" line6="    let _posX: number = -1" line7="    let _posY: number = -1" line8="    let _posW: number = -1" line9="    let _posH: number = -1" line10="" line11="" line12="    export enum LCD_Direction {" line13="        //% block=Front" line14="        Front = 0," line15="        //% block=Back" line16="        Back = 2" line17="    }" line18="" line19="    export enum BTNCmd {" line20="        //% block=&quot;A&quot;" line21="        A = 1," line22="        //% block=&quot;B&quot;" line23="        B = 2," line24="        //% block=&quot;A+B&quot;" line25="        AB = 3" line26="    }" line27="" line28="    export enum ColorList {" line29="        //% block=&quot;Red&quot;" line30="        Red = 0," line31="        //% block=&quot;Blue&quot;" line32="        Blue = 1," line33="        //% block=&quot;Green&quot;" line34="        Green = 2," line35="        //% block=&quot;Yellow&quot;" line36="        Yellow = 3," line37="        //% block=&quot;Orange&quot;" line38="        Orange = 4," line39="        //% block=&quot;Purple&quot;" line40="        Purple = 5," line41="        //% block=&quot;Pink&quot;" line42="        Pink = 6," line43="        //% block=&quot;White&quot;" line44="        White = 7," line45="        //% block=&quot;Black&quot;" line46="        Black = 8," line47="        //% block=&quot;Custom&quot;" line48="        Custom = 9," line49="    }" line50="" line51="" line52="    export enum ModelFunction {" line53="        //% block=TrafficSign" line54="        TrafficSign = 0x1," line55="        //% block=ObjectTracking" line56="        ObjectTracking = 0x2," line57="        //% block=FaceTracking" line58="        FaceTracking = 0x3," line59="        //% block=NumberRecognition" line60="        NumberRecognition = 0x4," line61="        //% block=ClassifyImage" line62="        ClassifyImage = 0x5," line63="        //% block=LetterRecognition" line64="        LetterRecognition = 0x6,   " line65="    }" line66="" line67="    export enum CvFunction {" line68="        //% block=ColorBlobTracking" line69="        ColorBlobTracking = 0x10," line70="        //% block=LineFollower" line71="        LineFollower = 0x20," line72="    }" line73="" line74="    export enum FullFunction {" line75="        //% block=TrafficSign" line76="        TrafficSign = 0x1," line77="        //% block=ObjectTracking" line78="        ObjectTracking = 0x2," line79="        //% block=FaceTracking" line80="        FaceTracking = 0x3," line81="        //% block=NumberRecognition" line82="        NumberRecognition = 0x4," line83="        //% block=ClassifyImage" line84="        ClassifyImage = 0x5," line85="        //% block=LetterRecognition" line86="        LetterRecognition = 0x6," line87="        //% block=ColorBlobTracking" line88="        ColorBlobTracking = 0x10," line89="        //% block=LineFollower" line90="        LineFollower = 0x20," line91="    }" line92="" line93="    export enum ColorNames {" line94="        //% block=red" line95="        red = 1," line96="        //% block=blue" line97="        blue = 2," line98="        //% block=yellow" line99="        yellow = 3," line100="    }" line101="" line102="" line103="" line104="    /*" line105="    * VOC2012_Object Card" line106="    */" line107="" line108="    export enum VOC2012_Object {" line109="        //% block=aeroplane" line110="        aeroplane = 0," line111="        //% block=bicycle" line112="        bicycle = 1," line113="        //% block=bird" line114="        bird = 2," line115="        //% block=boat" line116="        boat = 3," line117="        //% block=bottle" line118="        bottle = 4," line119="        //% block=bus" line120="        bus = 5," line121="        //% block=car" line122="        car = 6," line123="        //% block=cat" line124="        cat = 7," line125="        //% block=chair" line126="        chair = 8," line127="        //% block=cow" line128="        cow = 9," line129="        //% block=diningtable" line130="        diningtable = 10," line131="        //% block=dog" line132="        dog = 11," line133="        //% block=horse" line134="        horse = 12," line135="        //% block=motorbike" line136="        motorbike = 13," line137="        //% block=person" line138="        person = 14," line139="        //% block=pottedplant" line140="        pottedplant = 15," line141="        //% block=sheep" line142="        sheep = 16," line143="        //% block=sofa" line144="        sofa = 17," line145="        //% block=train" line146="        train = 18," line147="        //% block=tvmonitor" line148="        tvmonitor = 19," line149="    }" line150="" line151="    /*" line152="    * Traffic sign Card" line153="    */" line154="    export enum TrafficCard {" line155="        //% block=&quot;Forward&quot;" line156="        forward = 1," line157="        //% block=&quot;Turn around&quot;" line158="        turnaround = 2," line159="        //% block=&quot;Left&quot;" line160="        left = 3," line161="        //% block=&quot;Right&quot;" line162="        right = 4," line163="        //% block=&quot;Stop&quot;" line164="        stop = 5," line165="        //% block=&quot;Speed limit&quot;" line166="        speedlimit = 6," line167="        //% block=&quot;Tunnel&quot;" line168="        tunnel = 7" line169="    }" line170="" line171="    /**" line172="    * Number Card" line173="    */" line174="    export enum NumberCard {" line175="        //% block=&quot;0&quot;" line176="        zero = 0," line177="        //% block=&quot;1&quot;" line178="        one = 1," line179="        //% block=&quot;2&quot;" line180="        two = 2," line181="        //% block=&quot;3&quot;" line182="        three = 3," line183="        //% block=&quot;4&quot;" line184="        four = 4," line185="        //% block=&quot;5&quot;" line186="        five = 5," line187="        //% block=&quot;6&quot;" line188="        six = 6," line189="        //% block=&quot;7&quot;" line190="        seven = 7," line191="        //% block=&quot;8&quot;" line192="        eight = 8," line193="        //% block=&quot;9&quot;" line194="        nine = 9" line195="    }" line196="    /**" line197="    * Letter Card" line198="    */" line199="    export enum LetterCard {" line200="        //% block=&quot;A&quot;" line201="        A = 0," line202="        //% block=&quot;B&quot;" line203="        B = 1," line204="        //% block=&quot;C&quot;" line205="        C = 2," line206="        //% block=&quot;D&quot;" line207="        D = 3," line208="        //% block=&quot;E&quot;" line209="        E = 4," line210="        //% block=&quot;F&quot;" line211="        F = 5" line212="    }" line213="" line214="    /**" line215="    * Result list" line216="    */" line217="    export enum GetResult {" line218="        //% block=&quot;X&quot;" line219="        result_X = 1," line220="        //% block=&quot;Y&quot;" line221="        result_Y = 2," line222="        //% block=&quot;W&quot;" line223="        result_W = 3," line224="        //% block=&quot;H&quot;" line225="        result_H = 4" line226="    }" line227="" line228="    /**" line229="     * Result XY" line230="     */" line231="    export enum GetResultXY {" line232="        //% block=&quot;X&quot;" line233="        result_X = 1," line234="        //% block=&quot;Y&quot;" line235="        result_Y = 2" line236="    }" line237="" line238="" line239="" line240="" line241="    let btnEvent: (btn: number) =&gt; void" line242="" line243="    function trim(n: string): string {" line244="        while (n.charCodeAt(n.length - 1) &lt; 0x1f) {" line245="            n = n.slice(0, n.length - 1)" line246="        }" line247="        return n" line248="    }" line249="" line250="    let modelCmd: number[] = [81,82,83,84];" line251="    serial.onDataReceived('\n', function () {" line252="        let a = serial.readUntil('\n')" line253="        if (a.charAt(0) == 'K') {" line254="            a = trim(a)" line255="            let b = a.slice(1, a.length).split(' ')" line256="            let cmd = parseInt(b[0])" line257="            if (cmd == 42) { // feature extraction" line258="                _className = b[1]" line259="            } else if (cmd == 31) { // face tracking" line260="                _posX = parseInt(b[1])" line261="                _posY = parseInt(b[2])" line262="                _posW = parseInt(b[3])" line263="                _posH = parseInt(b[4])" line264="                _className = b[5]" line265="            } else if (cmd == 15) { // color blob tracking" line266="                _posX = parseInt(b[1])" line267="                _posY = parseInt(b[2])" line268="                _posW = parseInt(b[3])" line269="                _posH = parseInt(b[4])" line270="            } else if (cmd == 19) { // line follower color" line271="                _posX = parseInt(b[1])" line272="                _posY = parseInt(b[2])" line273="            } else if (modelCmd.indexOf(cmd) != -1) { // model cmd" line274="                _posX = parseInt(b[1])" line275="                _posY = parseInt(b[2])" line276="                _posW = parseInt(b[3])" line277="                _posH = parseInt(b[4])" line278="                _className = b[5]" line279="            } else if (cmd == 3) { // btn" line280="                control.raiseEvent(koiNewEventId, parseInt(b[1]))" line281="            }" line282="        }" line283="    })" line284="" line285="    function getResultXYWH(res: GetResult): number {" line286="        let ret = -1" line287="        if (res == GetResult.result_X) {" line288="            ret = _posX" line289="            _posX = -1" line290="        } else if (res == GetResult.result_Y) {" line291="            ret = _posY" line292="            _posY = -1" line293="        } else if (res == GetResult.result_W) {" line294="            ret = _posW" line295="            _posW = -1" line296="        } else if (res == GetResult.result_H) {" line297="            ret = _posH" line298="            _posH = -1" line299="        }" line300="        return ret" line301="    }" line302="" line303="    function getResultXY(res: GetResultXY): number {" line304="        let ret2 = -1" line305="        if (res == GetResultXY.result_X) {" line306="            ret2 = _posX" line307="            _posX = -1" line308="        } else if (res == GetResultXY.result_Y) {" line309="            ret2 = _posY" line310="            _posY = -1" line311="        }" line312="        return ret2" line313="    }" line314="" line315="    function getResultClass(): string {" line316="        let ret3 = _className" line317="        _className = ''" line318="        return ret3" line319="    }" line320="" line321="" line322="    /**" line323="     * Init the tabbyvision library with serial connection" line324="     * @param tx Tx pin; eg: SerialPin.P13" line325="     * @param rx Rx pin; eg: SerialPin.P14" line326="     */" line327="    //% blockId=tabbyvision_init block=&quot;init tabbyvision Tx %tx Rx %rx&quot;" line328="    //% weight=100 group=&quot;Basic&quot;" line329="    export function init(tx: SerialPin, rx: SerialPin): void {" line330="        serial.redirect(tx, rx, BaudRate.BaudRate115200);" line331="        serial.setTxBufferSize(64)" line332="        serial.setRxBufferSize(64)" line333="        serial.readString()" line334="        serial.writeString('\n\n')" line335="    }" line336="" line337="    /**" line338="     * LCD Direction" line339="     * @param dir Direction; eg: 0" line340="     */" line341="    //% blockId=tabbyvision_lcd_direction block=&quot;LCD direction %dir&quot;" line342="    //% weight=99 group=&quot;Basic&quot;" line343="    export function lcdDirection(dir: LCD_Direction): void {" line344="        serial.writeLine(`K6 ${dir}`)" line345="    }" line346="" line347="    /**" line348="     * When button is pressed" line349="     * @param handler " line350="     */" line351="    //% blockId=tabbyvision_on_button_pressed block=&quot;on button |%btn pressed&quot;" line352="    //% weight=98 group=&quot;Basic&quot;" line353="    export function onButtonPressed(btn: BTNCmd, handler: () =&gt; void) {" line354="        control.onEvent(koiNewEventId, btn, handler);" line355="    }" line356="" line357="    /**" line358="     * Switch Function" line359="     * @param func Function; eg: LineFollower" line360="     */" line361="    //% blockId=tabbyvision_switch_function block=&quot;switch function %func&quot;" line362="    //% weight=97 group=&quot;Basic&quot;" line363="    //% func.fieldEditor=&quot;gridpicker&quot;" line364="    //% func.fieldOptions.columns=3" line365="    export function switchFunction(func: FullFunction): void {" line366="        serial.writeLine(`K97 ${func}`)" line367="    }" line368="" line369="    /**" line370="     * Enable Model + CV" line371="     * @param model Function; eg: FaceTracking" line372="     * @param cv Function; eg: ColorBlobTracking" line373="     */" line374="    //% blockId=tabbyvision_enable_model_cv block=&quot;enable model %model cv %cv&quot;" line375="    //% weight=96 group=&quot;Basic&quot;" line376="    //% model.fieldEditor=&quot;gridpicker&quot;" line377="    //% model.fieldOptions.columns=3" line378="    //% advanced=true" line379="    export function enableModelCV(model: ModelFunction, cv: CvFunction): void {" line380="        serial.writeLine(`K97 ${model+cv}`)" line381="    }" line382="" line383="" line384="    /**" line385="     * Color Blob Tracking Set Color" line386="     * @param color " line387="     */" line388="    //% blockId=tabbyvision_color_blob_tracking_set_color block=&quot;color blob tracking set color %color&quot;" line389="    //% color.shadow=&quot;colorNumberPicker&quot;" line390="    //% weight=90 group=&quot;Color blob tracking&quot;" line391="    export function colorObjectTrackingSetColor(color: ColorList): void {" line392="        serial.writeLine(`K18 ${color}`)" line393="    }" line394="" line395="    /**" line396="     * Color Blob Tracking Calibrate Color" line397="     */" line398="    //% blockId=tabbyvision_color_blob_tracking_calibrate block=&quot;color blob tracking calibrate&quot;" line399="    //% weight=90 group=&quot;Color blob tracking&quot;" line400="    export function colorObjectTrackingCalibrate(): void {" line401="        serial.writeLine(`K16`)" line402="    }" line403="" line404="    /**" line405="     * Color Blob Tracking Get Result" line406="     * @param res for color; eg: GetResult.result_X" line407="     */" line408="    //% block = &quot;color blob tracking get result %res&quot;" line409="    //% blockId=tabbyvision_color_blob_tracking_get_result" line410="    //% weight=89 group=&quot;Color blob tracking&quot;" line411="    //% res.fieldEditor=&quot;gridpicker&quot;" line412="    //% res.fieldOptions.columns=4" line413="" line414="    export function colorObjectTrackingGetPosition(res: GetResult): number {" line415="        return getResultXYWH(res)" line416="    }" line417="" line418="    /**" line419="     * Traffic Sign Get Class" line420="     * @returns class" line421="     */" line422="    //% block=&quot;traffic sign get class:%tsclass&quot;" line423="    //% blockId=tabbyvision_traffic_sign_get_class" line424="    //% weight=80 group=&quot;Traffic sign&quot;" line425="    //% tsclass.fieldEditor=&quot;gridpicker&quot;" line426="    //% tsclass.fieldOptions.columns=2" line427="    export function trafficSignGetClass(tsclass: TrafficCard): boolean {" line428="        let ret4 = _className == tsclass.toString()" line429="        _className = ''" line430="        return ret4" line431="    }" line432="" line433="    /**" line434="     * Traffic Sign Get Position" line435="     * @returns position; eg: GetResult.result_X" line436="     */" line437="    //% blockId=tabbyvision_traffic_sign_get_position block=&quot;traffic sign get position&quot;" line438="    //% weight=79 group=&quot;Traffic sign&quot;" line439="    export function trafficSignGetPosition(res: GetResult): number {" line440="        return getResultXYWH(res)" line441="    }" line442="" line443="    /**" line444="     * Line Follower Set Key Color" line445="     * @param color" line446="     */" line447="    //% blockId=tabbyvision_line_follower_set_threshold block=&quot;line follower set threshold %threshold&quot;" line448="    //% weight=70 group=&quot;Line follower&quot;" line449="    export function lineFollowerSetThreshold(key: ColorNames) {" line450="        serial.writeLine(`K19 ${key}`)" line451="    }" line452="" line453="    /**" line454="     * Line Follower Get Position" line455="     * @returns bias x" line456="     */" line457="    //% blockId=tabbyvision_line_follower_get_position block=&quot;line follower get position&quot;" line458="    //% weight=69 group=&quot;Line follower&quot;" line459="    export function lineFollowerGetPosition(res: GetResultXY): number {" line460="        return getResultXY(res)" line461="    }" line462="" line463="    /**" line464="    * Face Tracking Get Position " line465="    */" line466="    //% block = &quot;face tracking get %res&quot;" line467="    //% blockId=tabbyvision_face_tracking_get_position" line468="    //% weight=60 group=&quot;Face tracking&quot;" line469="    export function faceTrackingGetPosition(res: GetResult): number {" line470="        return getResultXYWH(res)" line471="    }" line472="" line473="    /**" line474="     * Object Tracking is Class" line475="     * @param object VOC2012_Object; eg: VOC2012_Object.cat" line476="     */" line477="    //% block=&quot;object tracking is class %object ?&quot;" line478="    //% blockId=tabbyvision_object_tracking_is_class" line479="    //% weight=50 group=&quot;Object tracking&quot;" line480="    export function objectTrackingIsClass(obj: VOC2012_Object): boolean {" line481="        let objectList = [&quot;aeroplane&quot;, &quot;bicycle&quot;, &quot;bird&quot;, &quot;boat&quot;, &quot;bottle&quot;, &quot;bus&quot;, &quot;car&quot;, &quot;cat&quot;, &quot;chair&quot;, &quot;cow&quot;, &quot;diningtable&quot;, &quot;dog&quot;, &quot;horse&quot;, &quot;motorbike&quot;, &quot;person&quot;, &quot;pottedplant&quot;, &quot;sheep&quot;, &quot;sofa&quot;, &quot;train&quot;, &quot;tvmonitor&quot;]" line482="        return _className == objectList[obj]" line483="    }" line484="" line485="    /**" line486="     * Object Tracking Get Class" line487="     */" line488="    //% block=&quot;object tracking get class&quot;" line489="    //% blockId=tabbyvision_object_tracking_get_class" line490="    //% weight=50 group=&quot;Object tracking&quot;" line491="    export function objectTrackingGetClass(): string {" line492="        let ret52 = _className" line493="        return ret52" line494="    }" line495="" line496="    /**" line497="     * Object Tracking Get Position" line498="     * @param axis for x; eg: GetResult.result_X" line499="     * @returns position" line500="     */" line501="    //% blockId=tabbyvision_object_tracking_get_position block=&quot;object tracking get position %axis&quot;" line502="    //% weight=49 group=&quot;Object tracking&quot;" line503="    export function objectTrackingGetPosition(axis: GetResult): number {" line504="        return getResultXYWH(axis)" line505="    }" line506="" line507="    /**" line508="     * Classify Image Reset" line509="     */" line510="    //% blockId=tabbyvision_classify_image_reset block=&quot;classify image reset&quot;" line511="    //% weight=40 group=&quot;Classifier&quot;" line512="    export function classifyImageReset(): void {" line513="        serial.writeLine(`K45`)" line514="    }" line515="" line516="    /**" line517="     * Classify Image Add Tag" line518="     * @param name tag; eg: apple" line519="     */" line520="    //% blockId=tabbyvision_classify_image_add_tag block=&quot;classify image add tag %name&quot;" line521="    //% weight=39 group=&quot;Classifier&quot;" line522="    export function classifyImageAddTagID(name: string): void {" line523="        serial.writeLine(`K41 ${name}`)" line524="    }" line525="" line526="    /**" line527="     * Classify Image Get Class" line528="     * @returns class" line529="     */" line530="    //% blockId=tabbyvision_classify_image_get_class block=&quot;classify image get class&quot;" line531="    //% weight=38 group=&quot;Classifier&quot;" line532="    export function classifyImageGetClass(): string {" line533="        return getResultClass()" line534="    }" line535="" line536="    /**" line537="     * Classify Image Save" line538="     * @param path json to save; eg: model.json" line539="     */" line540="    //% blockId=tabbyvision_classify_image_save block=&quot;classify image save classifier %path&quot;" line541="    //% group=&quot;Classifier&quot; weight=35" line542="    export function classifyImageSave(path: string): void {" line543="        let str = `K43 ${path}`" line544="        serial.writeLine(str)" line545="    }" line546="" line547="    /**" line548="     * Classify Image Load" line549="     * @param path json to load; eg: model.json" line550="     */" line551="    //% blockId=tabbyvision_classify_image_load block=&quot;classify image load classifier %path&quot;" line552="    //% group=&quot;Classifier&quot; weight=34" line553="    export function classifyImageLoad(path: string): void {" line554="        let str2 = `K44 ${path}`" line555="        serial.writeLine(str2)" line556="    }" line557="" line558="" line559="    /**" line560="     * Number Recognition is Number ?" line561="     * @param number NumberCard; eg: NumberCard.6" line562="     */" line563="    //% block = &quot;number recognition number is %number ?&quot;" line564="    //% blockId=tabbyvision_number_recognition_is_number " line565="    //% weight=30 group=&quot;Number recognition&quot;" line566="    export function numberRecognitionIsNumber(num: NumberCard): boolean {" line567="        return getResultClass() == num.toString()" line568="    }" line569="" line570="    /**" line571="     * Number Recognition Get Number" line572="     */" line573="    //% block = &quot;number recognition get number &quot;" line574="    //% blockId=tabbyvision_number_recognition_get_number " line575="    //% weight=30 group=&quot;Number recognition&quot;" line576="    export function numberRecognitionGetNumber(): number {" line577="        let transfer = getResultClass()" line578="        if (transfer == ''){" line579="            return -1" line580="        }" line581="        return parseInt(transfer)" line582="    }" line583="" line584="" line585="    /**" line586="     * Letter Recognition is Letter ?" line587="     * @param letter LetterCard; eg: LetterCard.6" line588="     */" line589="    //% block = &quot;letter recognition letter is %letter ?&quot;" line590="    //% blockId=tabbyvision_letter_recognition_is_letter " line591="    //% weight=30 group=&quot;Letter recognition&quot;" line592="    export function letterRecognitionIsLetter(letter: LetterCard): boolean {" line593="        let letterList = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;]" line594="        return getResultClass() == letterList[letter]" line595="    }" line596="" line597="    /**" line598="     * Letter Recognition Get Letter" line599="     */" line600="    //% block = &quot;letter recognition get letter &quot;" line601="    //% blockId=tabbyvision_letter_recognition_get_letter " line602="    //% weight=30 group=&quot;Letter recognition&quot;" line603="    export function letterRecognitionGetLetter(): string {" line604="        return getResultClass()" line605="    }" line606="" line607="}" numlines="608"></mutation></block></statement></block></xml>