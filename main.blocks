<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tabbyvision {" line1="" line2="    let koiNewEventId = 1228" line3="" line4="    // cached results" line5="    let _className: string = ''" line6="    let _posX: number = -1" line7="    let _posY: number = -1" line8="    let _posW: number = -1" line9="    let _posH: number = -1" line10="" line11="" line12="    export enum LCD_Direction {" line13="        //% block=Front" line14="        Front = 0," line15="        //% block=Back" line16="        Back = 2" line17="    }" line18="" line19="    export enum BTNCmd {" line20="        //% block=&quot;A&quot;" line21="        A = 1," line22="        //% block=&quot;B&quot;" line23="        B = 2," line24="        //% block=&quot;A+B&quot;" line25="        AB = 3" line26="    }" line27="" line28="    export enum ColorList {" line29="        //% block=&quot;Red&quot;" line30="        Red = 0," line31="        //% block=&quot;Blue&quot;" line32="        Blue = 1," line33="        //% block=&quot;Green&quot;" line34="        Green = 2," line35="        //% block=&quot;Yellow&quot;" line36="        Yellow = 3," line37="        //% block=&quot;Orange&quot;" line38="        Orange = 4," line39="        //% block=&quot;Purple&quot;" line40="        Purple = 5," line41="        //% block=&quot;Pink&quot;" line42="        Pink = 6," line43="        //% block=&quot;White&quot;" line44="        White = 7," line45="        //% block=&quot;Black&quot;" line46="        Black = 8," line47="        //% block=&quot;Custom&quot;" line48="        Custom = 9," line49="    }" line50="" line51="" line52="    export enum ModelFunction {" line53="        //% block=TrafficSign" line54="        TrafficSign = 0x1," line55="        //% block=ObjectTracking" line56="        ObjectTracking = 0x2," line57="        //% block=FaceTracking" line58="        FaceTracking = 0x3," line59="        //% block=NumberRecognition" line60="        NumberRecognition = 0x4," line61="        //% block=ClassifyImage" line62="        ClassifyImage = 0x5," line63="        //% block=LetterRecognition" line64="        LetterRecognition = 0x6,   " line65="    }" line66="" line67="    export enum CvFunction {" line68="        //% block=ColorBlobTracking" line69="        ColorBlobTracking = 0x10," line70="        //% block=LineFollower" line71="        LineFollower = 0x20," line72="    }" line73="" line74="    export enum FullFunction {" line75="        //% block=TrafficSign" line76="        TrafficSign = 0x1," line77="        //% block=ObjectTracking" line78="        ObjectTracking = 0x2," line79="        //% block=FaceTracking" line80="        FaceTracking = 0x3," line81="        //% block=NumberRecognition" line82="        NumberRecognition = 0x4," line83="        //% block=ClassifyImage" line84="        ClassifyImage = 0x5," line85="        //% block=LetterRecognition" line86="        LetterRecognition = 0x6," line87="        //% block=ColorBlobTracking" line88="        ColorBlobTracking = 0x10," line89="        //% block=LineFollower" line90="        LineFollower = 0x20," line91="    }" line92="" line93="    export enum ColorNames {" line94="        //% block=red" line95="        red = 1," line96="        //% block=blue" line97="        blue = 2," line98="        //% block=yellow" line99="        yellow = 3," line100="    }" line101="" line102="" line103="" line104="    /*" line105="    * VOC2012_Object Card" line106="    */" line107="" line108="    export enum VOC2012_Object {" line109="        //% block=nothing" line110="        nothing = -1," line111="        //% block=aeroplane" line112="        aeroplane = 0," line113="        //% block=bicycle" line114="        bicycle = 1," line115="        //% block=bird" line116="        bird = 2," line117="        //% block=boat" line118="        boat = 3," line119="        //% block=bottle" line120="        bottle = 4," line121="        //% block=bus" line122="        bus = 5," line123="        //% block=car" line124="        car = 6," line125="        //% block=cat" line126="        cat = 7," line127="        //% block=chair" line128="        chair = 8," line129="        //% block=cow" line130="        cow = 9," line131="        //% block=diningtable" line132="        diningtable = 10," line133="        //% block=dog" line134="        dog = 11," line135="        //% block=horse" line136="        horse = 12," line137="        //% block=motorbike" line138="        motorbike = 13," line139="        //% block=person" line140="        person = 14," line141="        //% block=pottedplant" line142="        pottedplant = 15," line143="        //% block=sheep" line144="        sheep = 16," line145="        //% block=sofa" line146="        sofa = 17," line147="        //% block=train" line148="        train = 18," line149="        //% block=tvmonitor" line150="        tvmonitor = 19," line151="    }" line152="" line153="    /*" line154="    * Traffic sign Card" line155="    */" line156="    export enum TrafficCard {" line157="        //% block=&quot;Forward&quot;" line158="        forward = 1," line159="        //% block=&quot;Turn around&quot;" line160="        turnaround = 2," line161="        //% block=&quot;Left&quot;" line162="        left = 3," line163="        //% block=&quot;Right&quot;" line164="        right = 4," line165="        //% block=&quot;Stop&quot;" line166="        stop = 5," line167="        //% block=&quot;Speed limit&quot;" line168="        speedlimit = 6," line169="        //% block=&quot;Tunnel&quot;" line170="        tunnel = 7" line171="    }" line172="" line173="    /**" line174="    * Number Card" line175="    */" line176="    export enum NumberCard {" line177="        //% block=&quot;0&quot;" line178="        zero = 0," line179="        //% block=&quot;1&quot;" line180="        one = 1," line181="        //% block=&quot;2&quot;" line182="        two = 2," line183="        //% block=&quot;3&quot;" line184="        three = 3," line185="        //% block=&quot;4&quot;" line186="        four = 4," line187="        //% block=&quot;5&quot;" line188="        five = 5," line189="        //% block=&quot;6&quot;" line190="        six = 6," line191="        //% block=&quot;7&quot;" line192="        seven = 7," line193="        //% block=&quot;8&quot;" line194="        eight = 8," line195="        //% block=&quot;9&quot;" line196="        nine = 9" line197="    }" line198="" line199="    /**" line200="    * Result list" line201="    */" line202="    export enum GetResult {" line203="        //% block=&quot;X&quot;" line204="        result_X = 1," line205="        //% block=&quot;Y&quot;" line206="        result_Y = 2," line207="        //% block=&quot;W&quot;" line208="        result_W = 3," line209="        //% block=&quot;H&quot;" line210="        result_H = 4" line211="    }" line212="" line213="    /**" line214="     * Result XY" line215="     */" line216="    export enum GetResultXY {" line217="        //% block=&quot;X&quot;" line218="        result_X = 1," line219="        //% block=&quot;Y&quot;" line220="        result_Y = 2" line221="    }" line222="" line223="" line224="" line225="" line226="    let btnEvent: (btn: number) =&gt; void" line227="" line228="    function trim(n: string): string {" line229="        while (n.charCodeAt(n.length - 1) &lt; 0x1f) {" line230="            n = n.slice(0, n.length - 1)" line231="        }" line232="        return n" line233="    }" line234="" line235="    serial.onDataReceived('\n', function () {" line236="        let a = serial.readUntil('\n')" line237="        if (a.charAt(0) == 'K') {" line238="            a = trim(a)" line239="            let b = a.slice(1, a.length).split(' ')" line240="            let cmd = parseInt(b[0])" line241="            if (cmd == 42) { // feature extraction" line242="                _className = b[1]" line243="            } else if (cmd == 31) { // face tracking" line244="                _posX = parseInt(b[1])" line245="                _posY = parseInt(b[2])" line246="                _posW = parseInt(b[3])" line247="                _posH = parseInt(b[4])" line248="                _className = b[5]" line249="            } else if (cmd == 15) { // color blob tracking" line250="                _posX = parseInt(b[1])" line251="                _posY = parseInt(b[2])" line252="                _posW = parseInt(b[3])" line253="                _posH = parseInt(b[4])" line254="            } else if (cmd == 19) { // line follower color" line255="                _posX = parseInt(b[1])" line256="                _posY = parseInt(b[2])" line257="            } else if (cmd == 81) { // traffic sign" line258="                _className = b[5]" line259="            } else if (cmd == 83) { // number recognition" line260="                _className = b[5]" line261="            } else if (cmd == 3) { // number recognition" line262="                control.raiseEvent(koiNewEventId, parseInt(b[1]))" line263="            }" line264="        }" line265="    })" line266="" line267="    function getResultXYWH(res: GetResult): number {" line268="        let ret = -1" line269="        if (res == GetResult.result_X) {" line270="            ret = _posX" line271="            _posX = -1" line272="        } else if (res == GetResult.result_Y) {" line273="            ret = _posY" line274="            _posY = -1" line275="        } else if (res == GetResult.result_W) {" line276="            ret = _posW" line277="            _posW = -1" line278="        } else if (res == GetResult.result_H) {" line279="            ret = _posH" line280="            _posH = -1" line281="        }" line282="        return ret" line283="    }" line284="" line285="    function getResultXY(res: GetResultXY): number {" line286="        let ret2 = -1" line287="        if (res == GetResultXY.result_X) {" line288="            ret2 = _posX" line289="            _posX = -1" line290="        } else if (res == GetResultXY.result_Y) {" line291="            ret2 = _posY" line292="            _posY = -1" line293="        }" line294="        return ret2" line295="    }" line296="" line297="    function getResultClass(): string {" line298="        let ret3 = _className" line299="        _className = ''" line300="        return ret3" line301="    }" line302="" line303="" line304="    /**" line305="     * Init the tabbyvision library with serial connection" line306="     * @param tx Tx pin; eg: SerialPin.P13" line307="     * @param rx Rx pin; eg: SerialPin.P14" line308="     */" line309="    //% blockId=tabbyvision_init block=&quot;init tabbyvision Tx %tx Rx %rx&quot;" line310="    //% weight=100 group=&quot;Basic&quot;" line311="    export function init(tx: SerialPin, rx: SerialPin): void {" line312="        serial.redirect(tx, rx, BaudRate.BaudRate115200);" line313="        serial.setTxBufferSize(64)" line314="        serial.setRxBufferSize(64)" line315="        serial.readString()" line316="        serial.writeString('\n\n')" line317="    }" line318="" line319="    /**" line320="     * LCD Direction" line321="     * @param dir Direction; eg: 0" line322="     */" line323="    //% blockId=tabbyvision_lcd_direction block=&quot;LCD direction %dir&quot;" line324="    //% weight=99 group=&quot;Basic&quot;" line325="    export function lcdDirection(dir: LCD_Direction): void {" line326="        serial.writeLine(`K6 ${dir}`)" line327="    }" line328="" line329="    /**" line330="     * When button is pressed" line331="     * @param handler " line332="     */" line333="    //% blockId=tabbyvision_on_button_pressed block=&quot;on button |%btn pressed&quot;" line334="    //% weight=98 group=&quot;Basic&quot;" line335="    export function onButtonPressed(btn: BTNCmd, handler: () =&gt; void) {" line336="        control.onEvent(koiNewEventId, btn, handler);" line337="    }" line338="" line339="    /**" line340="     * Switch Function" line341="     * @param func Function; eg: LineFollower" line342="     */" line343="    //% blockId=tabbyvision_switch_function block=&quot;switch function %func&quot;" line344="    //% weight=97 group=&quot;Basic&quot;" line345="    //% func.fieldEditor=&quot;gridpicker&quot;" line346="    //% func.fieldOptions.columns=3" line347="    export function switchFunction(func: FullFunction): void {" line348="        serial.writeLine(`K97 ${func}`)" line349="    }" line350="" line351="    /**" line352="     * Enable Model + CV" line353="     * @param model Function; eg: FaceTracking" line354="     * @param cv Function; eg: ColorBlobTracking" line355="     */" line356="    //% blockId=tabbyvision_enable_model_cv block=&quot;enable model %model cv %cv&quot;" line357="    //% weight=96 group=&quot;Basic&quot;" line358="    //% model.fieldEditor=&quot;gridpicker&quot;" line359="    //% model.fieldOptions.columns=3" line360="    //% advanced=true" line361="    export function enableModelCV(model: ModelFunction, cv: CvFunction): void {" line362="        serial.writeLine(`K97 ${model+cv}`)" line363="    }" line364="" line365="" line366="    /**" line367="     * Color Blob Tracking Set Color" line368="     * @param color " line369="     */" line370="    //% blockId=tabbyvision_color_blob_tracking_set_color block=&quot;color blob tracking set color %color&quot;" line371="    //% color.shadow=&quot;colorNumberPicker&quot;" line372="    //% weight=90 group=&quot;Color blob tracking&quot;" line373="    export function colorObjectTrackingSetColor(color: ColorList): void {" line374="        serial.writeLine(`K18 ${color}`)" line375="    }" line376="" line377="    /**" line378="     * Color Blob Tracking Calibrate Color" line379="     */" line380="    //% blockId=tabbyvision_color_blob_tracking_calibrate block=&quot;color blob tracking calibrate&quot;" line381="    //% weight=90 group=&quot;Color blob tracking&quot;" line382="    export function colorObjectTrackingCalibrate(): void {" line383="        serial.writeLine(`K16`)" line384="    }" line385="" line386="    /**" line387="     * Color Blob Tracking Get Result" line388="     * @param res for color; eg: GetResult.result_X" line389="     */" line390="    //% block = &quot;color blob tracking get result %res&quot;" line391="    //% blockId=tabbyvision_color_blob_tracking_get_result" line392="    //% weight=89 group=&quot;Color blob tracking&quot;" line393="    //% res.fieldEditor=&quot;gridpicker&quot;" line394="    //% res.fieldOptions.columns=4" line395="" line396="    export function colorObjectTrackingGetPosition(res: GetResult): number {" line397="        return getResultXYWH(res)" line398="    }" line399="" line400="    /**" line401="     * Traffic Sign Get Class" line402="     * @returns class" line403="     */" line404="    //% block=&quot;traffic sign get class:%tsclass&quot;" line405="    //% blockId=tabbyvision_traffic_sign_get_class" line406="    //% weight=80 group=&quot;Traffic sign&quot;" line407="    //% tsclass.fieldEditor=&quot;gridpicker&quot;" line408="    //% tsclass.fieldOptions.columns=2" line409="    export function trafficSignGetClass(tsclass: TrafficCard): boolean {" line410="        let ret4 = _className == tsclass.toString()" line411="        _className = ''" line412="        return ret4" line413="    }" line414="" line415="    /**" line416="     * Traffic Sign Get Position" line417="     * @returns position; eg: GetResult.result_X" line418="     */" line419="    //% blockId=tabbyvision_traffic_sign_get_position block=&quot;traffic sign get position&quot;" line420="    //% weight=79 group=&quot;Traffic sign&quot;" line421="    export function trafficSignGetPosition(res: GetResult): number {" line422="        return getResultXYWH(res)" line423="    }" line424="" line425="    /**" line426="     * Line Follower Set Key Color" line427="     * @param color" line428="     */" line429="    //% blockId=tabbyvision_line_follower_set_threshold block=&quot;line follower set threshold %threshold&quot;" line430="    //% weight=70 group=&quot;Line follower&quot;" line431="    export function lineFollowerSetThreshold(key: ColorNames) {" line432="        serial.writeLine(`K19 ${key}`)" line433="    }" line434="" line435="    /**" line436="     * Line Follower Get Position" line437="     * @returns bias x" line438="     */" line439="    //% blockId=tabbyvision_line_follower_get_position block=&quot;line follower get position&quot;" line440="    //% weight=69 group=&quot;Line follower&quot;" line441="    export function lineFollowerGetPosition(res: GetResultXY): number {" line442="        return getResultXY(res)" line443="    }" line444="" line445="    /**" line446="    * Face Tracking Get Position " line447="    */" line448="    //% block = &quot;face tracking get %res&quot;" line449="    //% blockId=tabbyvision_face_tracking_get_position" line450="    //% weight=60 group=&quot;Face tracking&quot;" line451="    export function faceTrackingGetPosition(res: GetResult): number {" line452="        return getResultXYWH(res)" line453="    }" line454="" line455="    /**" line456="     * Object Tracking Get Class" line457="     * @param object VOC2012_Object; eg: VOC2012_Object.cat" line458="     */" line459="    //% block=&quot;object tracking get class: %object&quot;" line460="    //% blockId=tabbyvision_object_tracking_get_class" line461="    //% weight=50 group=&quot;Object tracking&quot;" line462="    export function objectTrackingGetClass(object: VOC2012_Object): boolean {" line463="        let ret5 = _className == object.toString()" line464="        return ret5" line465="    }" line466="" line467="    /**" line468="     * Object Tracking Get Position" line469="     * @param axis for x; eg: GetResult.result_X" line470="     * @returns position" line471="     */" line472="    //% blockId=tabbyvision_object_tracking_get_position block=&quot;object tracking get position %axis&quot;" line473="    //% weight=49 group=&quot;Object tracking&quot;" line474="    export function objectTrackingGetPosition(axis: GetResult): number {" line475="        return getResultXYWH(axis)" line476="    }" line477="" line478="    /**" line479="     * Classify Image Reset" line480="     */" line481="    //% blockId=tabbyvision_classify_image_reset block=&quot;classify image reset&quot;" line482="    //% weight=40 group=&quot;Classifier&quot;" line483="    export function classifyImageReset(): void {" line484="        serial.writeLine(`K45`)" line485="    }" line486="" line487="    /**" line488="     * Classify Image Add Tag" line489="     * @param name tag; eg: apple" line490="     */" line491="    //% blockId=tabbyvision_classify_image_add_tag block=&quot;classify image add tag %name&quot;" line492="    //% weight=39 group=&quot;Classifier&quot;" line493="    export function classifyImageAddTagID(name: string): void {" line494="        serial.writeLine(`K41 ${name}`)" line495="    }" line496="" line497="    /**" line498="     * Classify Image Get Class" line499="     * @returns class" line500="     */" line501="    //% blockId=tabbyvision_classify_image_get_class block=&quot;classify image get class&quot;" line502="    //% weight=38 group=&quot;Classifier&quot;" line503="    export function classifyImageGetClass(): string {" line504="        return getResultClass()" line505="    }" line506="" line507="    /**" line508="     * Classify Image Save" line509="     * @param path json to save; eg: model.json" line510="     */" line511="    //% blockId=tabbyvision_classify_image_save block=&quot;classify image save classifier %path&quot;" line512="    //% group=&quot;Classifier&quot; weight=35" line513="    export function classifyImageSave(path: string): void {" line514="        let str = `K43 ${path}`" line515="        serial.writeLine(str)" line516="    }" line517="" line518="    /**" line519="     * Classify Image Load" line520="     * @param path json to load; eg: model.json" line521="     */" line522="    //% blockId=tabbyvision_classify_image_load block=&quot;classify image load classifier %path&quot;" line523="    //% group=&quot;Classifier&quot; weight=34" line524="    export function classifyImageLoad(path: string): void {" line525="        let str2 = `K44 ${path}`" line526="        serial.writeLine(str2)" line527="    }" line528="" line529="" line530="    /**" line531="     * Number Recognition is Number ?" line532="     * @param number NumberCard; eg: NumberCard.6" line533="     */" line534="    //% block = &quot;number recognition number is %number ?&quot;" line535="    //% blockId=tabbyvision_number_recognition_is_number " line536="    //% weight=30 group=&quot;Number recognition&quot;" line537="    export function numberRecognitionIsNumber(num: NumberCard): boolean {" line538="        return getResultClass() == num.toString()" line539="    }" line540="" line541="    /**" line542="     * Number Recognition Get Number" line543="     */" line544="    //% block = &quot;number recognition get number &quot;" line545="    //% blockId=tabbyvision_number_recognition_get_number " line546="    //% weight=30 group=&quot;Number recognition&quot;" line547="    export function numberRecognitionGetNumber(): number {" line548="        let transfer = getResultClass()" line549="        if (transfer == ''){" line550="            return -1" line551="        }" line552="        return parseInt(transfer)" line553="    }" line554="" line555="}" numlines="556"></mutation></block></statement></block></xml>