<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="4;o*Fj5sUrlCB1^XpZ`g" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="y/fj@I{B0RFx?^(hD8v#" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tabbyvision {" line1="" line2="    let koiNewEventId = 1228" line3="    type Evtss = (t1: string, t2: string) =&gt; void" line4="    let mqttDataEvt: Evtss = null" line5="" line6="    // cached results" line7="    let _className: string = ''" line8="    let _posX: number = -1" line9="    let _posY: number = -1" line10="    let _posW: number = -1" line11="    let _posH: number = -1" line12="" line13="" line14="    export enum LCD_Direction {" line15="        //% block=Front" line16="        Front = 0," line17="        //% block=Back" line18="        Back = 2" line19="    }" line20="" line21="    export enum BTNCmd {" line22="        //% block=&quot;A&quot;" line23="        A = 1," line24="        //% block=&quot;B&quot;" line25="        B = 2," line26="        //% block=&quot;A+B&quot;" line27="        AB = 3" line28="    }" line29="" line30="    export enum ColorList {" line31="        //% block=&quot;Red&quot;" line32="        Red = 0," line33="        //% block=&quot;Blue&quot;" line34="        Blue = 1," line35="        //% block=&quot;Green&quot;" line36="        Green = 2," line37="        //% block=&quot;Yellow&quot;" line38="        Yellow = 3," line39="        //% block=&quot;Orange&quot;" line40="        Orange = 4," line41="        //% block=&quot;Purple&quot;" line42="        Purple = 5," line43="        //% block=&quot;Pink&quot;" line44="        Pink = 6," line45="        //% block=&quot;White&quot;" line46="        White = 7," line47="        //% block=&quot;Black&quot;" line48="        Black = 8," line49="        //% block=&quot;Custom&quot;" line50="        Custom = 9," line51="    }" line52="" line53="" line54="    export enum ModelFunction {" line55="        //% block=TrafficSign" line56="        TrafficSign = 0x1," line57="        //% block=ObjectTracking" line58="        ObjectTracking = 0x2," line59="        //% block=FaceTracking" line60="        FaceTracking = 0x3," line61="        //% block=NumberRecognition" line62="        NumberRecognition = 0x4," line63="        //% block=ClassifyImage" line64="        ClassifyImage = 0x5," line65="        //% block=LetterRecognition" line66="        LetterRecognition = 0x6,   " line67="    }" line68="" line69="    export enum CvFunction {" line70="        //% block=ColorBlobTracking" line71="        ColorBlobTracking = 0x10," line72="        //% block=LineFollower" line73="        LineFollower = 0x20," line74="    }" line75="" line76="    export enum FullFunction {" line77="        //% block=TrafficSign" line78="        TrafficSign = 0x1," line79="        //% block=ObjectTracking" line80="        ObjectTracking = 0x2," line81="        //% block=FaceTracking" line82="        FaceTracking = 0x3," line83="        //% block=NumberRecognition" line84="        NumberRecognition = 0x4," line85="        //% block=ClassifyImage" line86="        ClassifyImage = 0x5," line87="        //% block=LetterRecognition" line88="        LetterRecognition = 0x6," line89="        //% block=ColorBlobTracking" line90="        ColorBlobTracking = 0x10," line91="        //% block=LineFollower" line92="        LineFollower = 0x20," line93="        //% block=Iot" line94="        Iot = 0x80," line95="    }" line96="" line97="    export enum ColorNames {" line98="        //% block=red" line99="        red = 1," line100="        //% block=blue" line101="        blue = 2," line102="        //% block=yellow" line103="        yellow = 3," line104="    }" line105="" line106="" line107="" line108="    /*" line109="    * VOC2012_Object Card" line110="    */" line111="" line112="    export enum VOC2012_Object {" line113="        //% block=aeroplane" line114="        aeroplane = 0," line115="        //% block=bicycle" line116="        bicycle = 1," line117="        //% block=bird" line118="        bird = 2," line119="        //% block=boat" line120="        boat = 3," line121="        //% block=bottle" line122="        bottle = 4," line123="        //% block=bus" line124="        bus = 5," line125="        //% block=car" line126="        car = 6," line127="        //% block=cat" line128="        cat = 7," line129="        //% block=chair" line130="        chair = 8," line131="        //% block=cow" line132="        cow = 9," line133="        //% block=diningtable" line134="        diningtable = 10," line135="        //% block=dog" line136="        dog = 11," line137="        //% block=horse" line138="        horse = 12," line139="        //% block=motorbike" line140="        motorbike = 13," line141="        //% block=person" line142="        person = 14," line143="        //% block=pottedplant" line144="        pottedplant = 15," line145="        //% block=sheep" line146="        sheep = 16," line147="        //% block=sofa" line148="        sofa = 17," line149="        //% block=train" line150="        train = 18," line151="        //% block=tvmonitor" line152="        tvmonitor = 19," line153="    }" line154="" line155="    /*" line156="    * Traffic sign Card" line157="    */" line158="    export enum TrafficCard {" line159="        //% block=&quot;Around&quot;" line160="        Around = 0," line161="        //% block=&quot;Forward&quot;" line162="        Forward = 1," line163="        //% block=&quot;Left&quot;" line164="        left = 2," line165="        //% block=&quot;Right&quot;" line166="        Right = 3," line167="        //% block=&quot;Limiting30&quot;" line168="        Limiting30 = 4," line169="        //% block=&quot;Stop&quot;" line170="        Stop = 5," line171="        //% block=&quot;Tunnel&quot;" line172="        Tunnel = 6" line173="    }" line174="" line175="    /**" line176="    * Number Card" line177="    */" line178="    export enum NumberCard {" line179="        //% block=&quot;0&quot;" line180="        zero = 0," line181="        //% block=&quot;1&quot;" line182="        one = 1," line183="        //% block=&quot;2&quot;" line184="        two = 2," line185="        //% block=&quot;3&quot;" line186="        three = 3," line187="        //% block=&quot;4&quot;" line188="        four = 4," line189="        //% block=&quot;5&quot;" line190="        five = 5," line191="        //% block=&quot;6&quot;" line192="        six = 6," line193="        //% block=&quot;7&quot;" line194="        seven = 7," line195="        //% block=&quot;8&quot;" line196="        eight = 8," line197="        //% block=&quot;9&quot;" line198="        nine = 9" line199="    }" line200="    /**" line201="    * Letter Card" line202="    */" line203="    export enum LetterCard {" line204="        //% block=&quot;A&quot;" line205="        A = 0," line206="        //% block=&quot;B&quot;" line207="        B = 1," line208="        //% block=&quot;C&quot;" line209="        C = 2," line210="        //% block=&quot;D&quot;" line211="        D = 3," line212="        //% block=&quot;E&quot;" line213="        E = 4," line214="        //% block=&quot;F&quot;" line215="        F = 5" line216="    }" line217="" line218="    /**" line219="    * Result list" line220="    */" line221="    export enum GetResult {" line222="        //% block=&quot;X&quot;" line223="        result_X = 1," line224="        //% block=&quot;Y&quot;" line225="        result_Y = 2," line226="        //% block=&quot;W&quot;" line227="        result_W = 3," line228="        //% block=&quot;H&quot;" line229="        result_H = 4" line230="    }" line231="" line232="    /**" line233="     * Result XY" line234="     */" line235="    export enum GetResultXY {" line236="        //% block=&quot;X&quot;" line237="        result_X = 1," line238="        //% block=&quot;Y&quot;" line239="        result_Y = 2" line240="    }" line241="" line242="" line243="" line244="" line245="    let btnEvent: (btn: number) =&gt; void" line246="" line247="    function trim(n: string): string {" line248="        while (n.charCodeAt(n.length - 1) &lt; 0x1f) {" line249="            n = n.slice(0, n.length - 1)" line250="        }" line251="        return n" line252="    }" line253="" line254="    let modelCmd: number[] = [31,81,82,83,84];" line255="    serial.onDataReceived('\n', function () {" line256="        let a = serial.readUntil('\n')" line257="        if (a.charAt(0) == 'K') {" line258="            a = trim(a)" line259="            let b = a.slice(1, a.length).split(' ')" line260="            let cmd = parseInt(b[0])" line261="            if (cmd == 42) { // feature extraction" line262="                _className = b[1]" line263="            } else if (cmd == 15) { // color blob tracking" line264="                _posX = parseInt(b[1])" line265="                _posY = parseInt(b[2])" line266="                _posW = parseInt(b[3])" line267="                _posH = parseInt(b[4])" line268="            } else if (cmd == 19) { // line follower color" line269="                _posX = parseInt(b[1])" line270="                _posY = parseInt(b[2])" line271="            } else if (modelCmd.indexOf(cmd) != -1) { // model cmd" line272="                _posX = parseInt(b[1])" line273="                _posY = parseInt(b[2])" line274="                _posW = parseInt(b[3])" line275="                _posH = parseInt(b[4])" line276="                _className = b[5]" line277="            } else if (cmd == 3) { // btn" line278="                control.raiseEvent(koiNewEventId, parseInt(b[1]))" line279="            } else if (cmd == 55) { // btn" line280="                if (mqttDataEvt) {" line281="                    mqttDataEvt(b[1], b[2])" line282="                }" line283="            }" line284="        }" line285="    })" line286="" line287="    function getResultXYWH(res: GetResult): number {" line288="        let ret = -1" line289="        if (res == GetResult.result_X) {" line290="            ret = _posX" line291="            _posX = -1" line292="        } else if (res == GetResult.result_Y) {" line293="            ret = _posY" line294="            _posY = -1" line295="        } else if (res == GetResult.result_W) {" line296="            ret = _posW" line297="            _posW = -1" line298="        } else if (res == GetResult.result_H) {" line299="            ret = _posH" line300="            _posH = -1" line301="        }" line302="        return ret" line303="    }" line304="" line305="    function getResultXY(res: GetResultXY): number {" line306="        let ret2 = -1" line307="        if (res == GetResultXY.result_X) {" line308="            ret2 = _posX" line309="            _posX = -1" line310="        } else if (res == GetResultXY.result_Y) {" line311="            ret2 = _posY" line312="            _posY = -1" line313="        }" line314="        return ret2" line315="    }" line316="" line317="    function getResultClass(): string {" line318="        let ret3 = _className" line319="        _className = ''" line320="        return ret3" line321="    }" line322="" line323="" line324="    /**" line325="     * Init the tabbyvision library with serial connection" line326="     * @param tx Tx pin; eg: SerialPin.P13" line327="     * @param rx Rx pin; eg: SerialPin.P14" line328="     */" line329="    //% blockId=tabbyvision_init block=&quot;init tabbyvision Tx %tx Rx %rx&quot;" line330="    //% weight=100 group=&quot;Basic&quot;" line331="    export function init(tx: SerialPin, rx: SerialPin): void {" line332="        serial.redirect(tx, rx, BaudRate.BaudRate115200);" line333="        serial.setTxBufferSize(64)" line334="        serial.setRxBufferSize(64)" line335="        serial.readString()" line336="        serial.writeString('\n\n')" line337="    }" line338="" line339="    /**" line340="     * LCD Direction" line341="     * @param dir Direction; eg: 0" line342="     */" line343="    //% blockId=tabbyvision_lcd_direction block=&quot;LCD direction %dir&quot;" line344="    //% weight=99 group=&quot;Basic&quot;" line345="    export function lcdDirection(dir: LCD_Direction): void {" line346="        serial.writeLine(`K6 ${dir}`)" line347="    }" line348="" line349="    /**" line350="     * When button is pressed" line351="     * @param handler " line352="     */" line353="    //% blockId=tabbyvision_on_button_pressed block=&quot;on button |%btn pressed&quot;" line354="    //% weight=98 group=&quot;Basic&quot;" line355="    export function onButtonPressed(btn: BTNCmd, handler: () =&gt; void) {" line356="        control.onEvent(koiNewEventId, btn, handler);" line357="    }" line358="" line359="    /**" line360="     * Switch Function" line361="     * @param func Function; eg: LineFollower" line362="     */" line363="    //% blockId=tabbyvision_switch_function block=&quot;switch function %func&quot;" line364="    //% weight=97 group=&quot;Basic&quot;" line365="    //% func.fieldEditor=&quot;gridpicker&quot;" line366="    //% func.fieldOptions.columns=3" line367="    export function switchFunction(func: FullFunction): void {" line368="        serial.writeLine(`K97 ${func}`)" line369="    }" line370="" line371="    /**" line372="     * Enable Model + CV" line373="     * @param model Function; eg: FaceTracking" line374="     * @param cv Function; eg: ColorBlobTracking" line375="     */" line376="    //% blockId=tabbyvision_enable_model_cv block=&quot;enable model %model cv %cv&quot;" line377="    //% weight=96 group=&quot;Basic&quot;" line378="    //% model.fieldEditor=&quot;gridpicker&quot;" line379="    //% model.fieldOptions.columns=3" line380="    //% advanced=true" line381="    export function enableModelCV(model: ModelFunction, cv: CvFunction): void {" line382="        serial.writeLine(`K97 ${model+cv}`)" line383="    }" line384="" line385="" line386="    /**" line387="     * Color Blob Tracking Set Color" line388="     * @param color " line389="     */" line390="    //% blockId=tabbyvision_color_blob_tracking_set_color block=&quot;color blob tracking set color %color&quot;" line391="    //% color.shadow=&quot;colorNumberPicker&quot;" line392="    //% weight=90 group=&quot;Color blob tracking&quot;" line393="    export function colorObjectTrackingSetColor(color: ColorList): void {" line394="        serial.writeLine(`K18 ${color}`)" line395="    }" line396="" line397="    /**" line398="     * Color Blob Tracking Calibrate Color" line399="     */" line400="    //% blockId=tabbyvision_color_blob_tracking_calibrate block=&quot;color blob tracking calibrate&quot;" line401="    //% weight=90 group=&quot;Color blob tracking&quot;" line402="    export function colorObjectTrackingCalibrate(): void {" line403="        serial.writeLine(`K16`)" line404="    }" line405="" line406="    /**" line407="     * Color Blob Tracking Get Result" line408="     * @param res for color; eg: GetResult.result_X" line409="     */" line410="    //% block = &quot;color blob tracking get result %res&quot;" line411="    //% blockId=tabbyvision_color_blob_tracking_get_result" line412="    //% weight=89 group=&quot;Color blob tracking&quot;" line413="    //% res.fieldEditor=&quot;gridpicker&quot;" line414="    //% res.fieldOptions.columns=4" line415="" line416="    export function colorObjectTrackingGetPosition(res: GetResult): number {" line417="        return getResultXYWH(res)" line418="    }" line419="" line420="    /**" line421="     * Traffic Sign Is Class" line422="     * @returns class" line423="     */" line424="    //% block=&quot;traffic sign is class %tsclass&quot;" line425="    //% blockId=tabbyvision_traffic_sign_is_class" line426="    //% weight=80 group=&quot;Traffic sign&quot;" line427="    //% tsclass.fieldEditor=&quot;gridpicker&quot;" line428="    //% tsclass.fieldOptions.columns=2" line429="    export function trafficSignIsClass(tsclass: TrafficCard): boolean {" line430="        let traffic = [&quot;around&quot;,&quot;forward&quot;,&quot;left&quot;,&quot;right&quot;,&quot;limiting30&quot;,&quot;stop&quot;,&quot;tunnel&quot;]" line431="        return _className == traffic[tsclass]" line432="    }" line433="" line434="    /**" line435="     * Traffic Sign Get Class" line436="     * @returns class" line437="     */" line438="    //% block=&quot;traffic sign get class&quot;" line439="    //% blockId=tabbyvision_traffic_sign_get_class" line440="    //% weight=80 group=&quot;Traffic sign&quot;" line441="    //% tsclass.fieldEditor=&quot;gridpicker&quot;" line442="    //% tsclass.fieldOptions.columns=2" line443="    export function trafficSignGetClass(): string {" line444="        return _className" line445="    }" line446="" line447="    /**" line448="     * Traffic Sign Get Position" line449="     * @returns position; eg: GetResult.result_X" line450="     */" line451="    //% blockId=tabbyvision_traffic_sign_get_position block=&quot;traffic sign get %res&quot;" line452="    //% weight=79 group=&quot;Traffic sign&quot;" line453="    export function trafficSignGetPosition(res: GetResult): number {" line454="        return getResultXYWH(res)" line455="    }" line456="" line457="    /**" line458="     * Line Follower Set Key Color" line459="     * @param color" line460="     */" line461="    //% blockId=tabbyvision_line_follower_set_threshold block=&quot;line follower set threshold %threshold&quot;" line462="    //% weight=70 group=&quot;Line follower&quot;" line463="    export function lineFollowerSetThreshold(key: ColorNames) {" line464="        serial.writeLine(`K19 ${key}`)" line465="    }" line466="" line467="    /**" line468="     * Line Follower Get Position" line469="     * @returns bias x" line470="     */" line471="    //% blockId=tabbyvision_line_follower_get_position block=&quot;line follower get %res&quot;" line472="    //% weight=69 group=&quot;Line follower&quot;" line473="    export function lineFollowerGetPosition(res: GetResultXY): number {" line474="        return getResultXY(res)" line475="    }" line476="" line477="    /**" line478="    * Face Tracking Get Position " line479="    */" line480="    //% block = &quot;face tracking get %res&quot;" line481="    //% blockId=tabbyvision_face_tracking_get_position" line482="    //% weight=60 group=&quot;Face tracking&quot;" line483="    export function faceTrackingGetPosition(res: GetResult): number {" line484="        return getResultXYWH(res)" line485="    }" line486="" line487="    /**" line488="    * Face Tracking Get Quantity" line489="    */" line490="    //% block = &quot;face tracking get quantity&quot;" line491="    //% blockId=tabbyvision_face_tracking_get_quantity" line492="    //% weight=60 group=&quot;Face tracking&quot;" line493="    export function faceTrackingGetQuantity(): number {" line494="        let transfer = _className" line495="        if (transfer==&quot;&quot;){" line496="            return 0" line497="        }" line498="        return parseInt(transfer)" line499="    }" line500="" line501="    /**" line502="     * Object Tracking is Class" line503="     * @param object VOC2012_Object; eg: VOC2012_Object.cat" line504="     */" line505="    //% block=&quot;object tracking is class %object&quot;" line506="    //% blockId=tabbyvision_object_tracking_is_class" line507="    //% weight=50 group=&quot;Object tracking&quot;" line508="    export function objectTrackingIsClass(obj: VOC2012_Object): boolean {" line509="        let objectList = [&quot;aeroplane&quot;, &quot;bicycle&quot;, &quot;bird&quot;, &quot;boat&quot;, &quot;bottle&quot;, &quot;bus&quot;, &quot;car&quot;, &quot;cat&quot;, &quot;chair&quot;, &quot;cow&quot;, &quot;diningtable&quot;, &quot;dog&quot;, &quot;horse&quot;, &quot;motorbike&quot;, &quot;person&quot;, &quot;pottedplant&quot;, &quot;sheep&quot;, &quot;sofa&quot;, &quot;train&quot;, &quot;tvmonitor&quot;]" line510="        return _className == objectList[obj]" line511="    }" line512="" line513="    /**" line514="     * Object Tracking Get Class" line515="     */" line516="    //% block=&quot;object tracking get class&quot;" line517="    //% blockId=tabbyvision_object_tracking_get_class" line518="    //% weight=50 group=&quot;Object tracking&quot;" line519="    export function objectTrackingGetClass(): string {" line520="        let ret52 = _className" line521="        return ret52" line522="    }" line523="" line524="    /**" line525="     * Object Tracking Get Position" line526="     * @param axis for x; eg: GetResult.result_X" line527="     * @returns position" line528="     */" line529="    //% blockId=tabbyvision_object_tracking_get_position block=&quot;object tracking get position %axis&quot;" line530="    //% weight=49 group=&quot;Object tracking&quot;" line531="    export function objectTrackingGetPosition(axis: GetResult): number {" line532="        return getResultXYWH(axis)" line533="    }" line534="" line535="    /**" line536="     * Classify Image Reset" line537="     */" line538="    //% blockId=tabbyvision_classify_image_reset block=&quot;classify image reset&quot;" line539="    //% weight=40 group=&quot;Classifier&quot;" line540="    export function classifyImageReset(): void {" line541="        serial.writeLine(`K45`)" line542="    }" line543="" line544="    /**" line545="     * Classify Image Add Tag" line546="     * @param name tag; eg: apple" line547="     */" line548="    //% blockId=tabbyvision_classify_image_add_tag block=&quot;classify image add tag %name&quot;" line549="    //% weight=39 group=&quot;Classifier&quot;" line550="    export function classifyImageAddTagID(name: string): void {" line551="        serial.writeLine(`K41 ${name}`)" line552="    }" line553="" line554="    /**" line555="     * Classify Image Get Class" line556="     * @returns class" line557="     */" line558="    //% blockId=tabbyvision_classify_image_get_class block=&quot;classify image get class&quot;" line559="    //% weight=38 group=&quot;Classifier&quot;" line560="    export function classifyImageGetClass(): string {" line561="        return getResultClass()" line562="    }" line563="" line564="    /**" line565="     * Classify Image Save" line566="     * @param path json to save; eg: model.json" line567="     */" line568="    //% blockId=tabbyvision_classify_image_save block=&quot;classify image save classifier %path&quot;" line569="    //% group=&quot;Classifier&quot; weight=35" line570="    export function classifyImageSave(path: string): void {" line571="        let str = `K43 ${path}`" line572="        serial.writeLine(str)" line573="    }" line574="" line575="    /**" line576="     * Classify Image Load" line577="     * @param path json to load; eg: model.json" line578="     */" line579="    //% blockId=tabbyvision_classify_image_load block=&quot;classify image load classifier %path&quot;" line580="    //% group=&quot;Classifier&quot; weight=34" line581="    export function classifyImageLoad(path: string): void {" line582="        let str2 = `K44 ${path}`" line583="        serial.writeLine(str2)" line584="    }" line585="" line586="" line587="    /**" line588="     * Number Recognition is Number" line589="     * @param number NumberCard; eg: NumberCard.6" line590="     */" line591="    //% block = &quot;number recognition number is %number&quot;" line592="    //% blockId=tabbyvision_number_recognition_is_number " line593="    //% weight=30 group=&quot;Number recognition&quot;" line594="    export function numberRecognitionIsNumber(num: NumberCard): boolean {" line595="        return getResultClass() == num.toString()" line596="    }" line597="" line598="    /**" line599="     * Number Recognition Get Number" line600="     */" line601="    //% block = &quot;number recognition get number &quot;" line602="    //% blockId=tabbyvision_number_recognition_get_number " line603="    //% weight=30 group=&quot;Number recognition&quot;" line604="    export function numberRecognitionGetNumber(): number {" line605="        let transfer2 = getResultClass()" line606="        if (transfer2 == ''){" line607="            return -1" line608="        }" line609="        return parseInt(transfer2)" line610="    }" line611="" line612="    /**" line613="    * Number Recognition Get Position" line614="    */" line615="    //% block = &quot;number recognition get %res&quot;" line616="    //% blockId=tabbyvision_number_recognition_get_position" line617="    //% weight=60 group=&quot;Number recognition&quot;" line618="    export function numberRecognitionGetPosition(res: GetResult): number {" line619="        return getResultXYWH(res)" line620="    }" line621="" line622="" line623="    /**" line624="     * Letter Recognition is Letter" line625="     * @param letter LetterCard; eg: LetterCard.6" line626="     */" line627="    //% block = &quot;letter recognition letter is %letter ?&quot;" line628="    //% blockId=tabbyvision_letter_recognition_is_letter " line629="    //% weight=30 group=&quot;Letter recognition&quot;" line630="    export function letterRecognitionIsLetter(letter: LetterCard): boolean {" line631="        let letterList = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;]" line632="        return getResultClass() == letterList[letter]" line633="    }" line634="" line635="    /**" line636="     * Letter Recognition Get Letter" line637="     */" line638="    //% block = &quot;letter recognition get letter &quot;" line639="    //% blockId=tabbyvision_letter_recognition_get_letter " line640="    //% weight=30 group=&quot;Letter recognition&quot;" line641="    export function letterRecognitionGetLetter(): string {" line642="        return getResultClass()" line643="    }" line644="    " line645="    /**" line646="    * Letter Recognition Get Position" line647="    */" line648="    //% block = &quot;letter recognition get %res&quot;" line649="    //% blockId=tabbyvision_letter_recognition_get_position" line650="    //% weight=60 group=&quot;Letter recognition&quot;" line651="    export function letterRecognitionGetPosition(res: GetResult): number {" line652="        return getResultXYWH(res)" line653="    }" line654="" line655="    /**" line656="     * @param ssid SSID; eg: ssid" line657="     * @param pass PASSWORD; eg: password" line658="     */" line659="    //% blockId=tabbyvision_join_ap block=&quot;Join Ap %ssid %pass&quot;" line660="    //% group=&quot;Wifi&quot; weight=50" line661="    export function tabbyvision_join_ap(ssid: string, pass: string) {" line662="        serial.writeLine(`K50 ${ssid} ${pass}`)" line663="        basic.pause(13000)" line664="    }" line665="" line666="    /**" line667="     * @param host Mqtt host; eg: iot.kittenbot.cn" line668="     * @param cid Client ID; eg: clientid" line669="     * @param port Host Port; eg: 1883" line670="     * @param user Username; eg: user" line671="     * @param pass Password; eg: pass" line672="     */" line673="    //% blockId=tabbyvision_mqtt_host block=&quot;Mqtt Host %host| clientID%cid||Port%port User%user Pass%pass&quot;" line674="    //% group=&quot;Wifi&quot; weight=46" line675="    export function tabbyvision_mqtt_host(" line676="        host: string," line677="        cid: string," line678="        port: number = 1883," line679="        user: string = null," line680="        pass: string = null" line681="    ) {" line682="        if (user &amp;&amp; pass) {" line683="            serial.writeLine(`K51 ${host} ${cid} ${port} ${user} ${pass}`)" line684="        } else {" line685="            serial.writeLine(`K51 ${host} ${cid} ${port}`)" line686="        }" line687="        basic.pause(2000)" line688="    }" line689="" line690="    /**" line691="     * @param topic Topic to subscribe; eg: /topic" line692="     */" line693="    //% blockId=tabbyvision_mqtt_sub block=&quot;Mqtt Subscribe %topic&quot;" line694="    //% group=&quot;Wifi&quot; weight=45" line695="    export function tabbyvision_mqtt_sub(topic: string) {" line696="        serial.writeLine(`K52 ${topic}`)" line697="        basic.pause(500)" line698="    }" line699="" line700="    /**" line701="     * @param topic Topic to publish; eg: /topic" line702="     * @param data Data to publish; eg: hello" line703="     */" line704="    //% blockId=tabbyvision_mqtt_pub block=&quot;Mqtt Publish %topic %data&quot;" line705="    //% group=&quot;Wifi&quot; weight=44" line706="    export function tabbyvision_mqtt_pub(topic: string, data: string) {" line707="        serial.writeLine(`K53 ${topic} ${data}`)" line708="    }" line709="" line710="    /**" line711="     * @param topic Mqtt Read; eg: /topic" line712="     */" line713="    //% blockId=tabbyvision_mqtt_read block=&quot;Mqtt Read %topic&quot;" line714="    //% group=&quot;Wifi&quot; weight=43" line715="    export function tabbyvision_mqtt_read(topic: string) {" line716="        topic = topic || ''" line717="        let str3 = `K55 ${topic}`" line718="        serial.writeLine(str3)" line719="        basic.pause(200)" line720="" line721="    }" line722="" line723="    //% blockId=tabbyvision_mqtt_onread block=&quot;on Mqtt Data&quot;" line724="    //% group=&quot;Wifi&quot; weight=42 draggableParameters=reporter" line725="    export function tabbyvision_mqtt_onread(" line726="        handler: (data: string, topic: string) =&gt; void" line727="    ) {" line728="        mqttDataEvt = handler" line729="    }" line730="}" numlines="731"></mutation></block></statement></block></xml>