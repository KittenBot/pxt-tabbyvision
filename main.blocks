<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="5L4Nlsi0=c}Vg7`9%xy(" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="kptCD2Fs|ql@DGLm^[|C" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tabbyvision {" line1="" line2="    let koiNewEventId = 1228" line3="" line4="    // cached results" line5="    let _className: string = ''" line6="    let _posX: number = -1" line7="    let _posY: number = -1" line8="    let _posW: number = -1" line9="    let _posH: number = -1" line10="" line11="" line12="    export enum LCD_Direction {" line13="        //% block=Front" line14="        Front = 0," line15="        //% block=Back" line16="        Back = 2" line17="    }" line18="" line19="    export enum BTNCmd {" line20="        //% block=&quot;A&quot;" line21="        A = 1," line22="        //% block=&quot;B&quot;" line23="        B = 2," line24="        //% block=&quot;A+B&quot;" line25="        AB = 3" line26="    }" line27="" line28="    export enum ColorList {" line29="        //% block=&quot;Red&quot;" line30="        Red = 0," line31="        //% block=&quot;Blue&quot;" line32="        Blue = 1," line33="        //% block=&quot;Green&quot;" line34="        Green = 2," line35="        //% block=&quot;Yellow&quot;" line36="        Yellow = 3," line37="        //% block=&quot;Orange&quot;" line38="        Orange = 4," line39="        //% block=&quot;Purple&quot;" line40="        Purple = 5," line41="        //% block=&quot;Pink&quot;" line42="        Pink = 6," line43="        //% block=&quot;White&quot;" line44="        White = 7," line45="        //% block=&quot;Black&quot;" line46="        Black = 8," line47="        //% block=&quot;Custom&quot;" line48="        Custom = 9," line49="    }" line50="" line51="" line52="    export enum ModelFunction {" line53="        //% block=TrafficSign" line54="        TrafficSign = 0x1," line55="        //% block=ObjectTracking" line56="        ObjectTracking = 0x2," line57="        //% block=FaceTracking" line58="        FaceTracking = 0x3," line59="        //% block=NumberRecognition" line60="        NumberRecognition = 0x4," line61="        //% block=ClassifyImage" line62="        ClassifyImage = 0x5," line63="    }" line64="" line65="    export enum CvFunction {" line66="        //% block=ColorBlobTracking" line67="        ColorBlobTracking = 0x10," line68="        //% block=LineFollower" line69="        LineFollower = 0x20," line70="    }" line71="" line72="    export enum FullFunction {" line73="        //% block=TrafficSign" line74="        TrafficSign = 0x1," line75="        //% block=ObjectTracking" line76="        ObjectTracking = 0x2," line77="        //% block=FaceTracking" line78="        FaceTracking = 0x3," line79="        //% block=NumberRecognition" line80="        NumberRecognition = 0x4," line81="        //% block=ClassifyImage" line82="        ClassifyImage = 0x5," line83="        //% block=ColorBlobTracking" line84="        ColorBlobTracking = 0x10," line85="        //% block=LineFollower" line86="        LineFollower = 0x20," line87="    }" line88="" line89="    export enum ColorNames {" line90="        //% block=red" line91="        red = 1," line92="        //% block=blue" line93="        blue = 2," line94="        //% block=yellow" line95="        yellow = 3," line96="    }" line97="" line98="" line99="" line100="    /*" line101="    * VOC2012_Object Card" line102="    */" line103="" line104="    export enum VOC2012_Object {" line105="        //% block=nothing" line106="        nothing = -1," line107="        //% block=aeroplane" line108="        aeroplane = 0," line109="        //% block=bicycle" line110="        bicycle = 1," line111="        //% block=bird" line112="        bird = 2," line113="        //% block=boat" line114="        boat = 3," line115="        //% block=bottle" line116="        bottle = 4," line117="        //% block=bus" line118="        bus = 5," line119="        //% block=car" line120="        car = 6," line121="        //% block=cat" line122="        cat = 7," line123="        //% block=chair" line124="        chair = 8," line125="        //% block=cow" line126="        cow = 9," line127="        //% block=diningtable" line128="        diningtable = 10," line129="        //% block=dog" line130="        dog = 11," line131="        //% block=horse" line132="        horse = 12," line133="        //% block=motorbike" line134="        motorbike = 13," line135="        //% block=person" line136="        person = 14," line137="        //% block=pottedplant" line138="        pottedplant = 15," line139="        //% block=sheep" line140="        sheep = 16," line141="        //% block=sofa" line142="        sofa = 17," line143="        //% block=train" line144="        train = 18," line145="        //% block=tvmonitor" line146="        tvmonitor = 19," line147="    }" line148="" line149="    /*" line150="    * Traffic sign Card" line151="    */" line152="    export enum TrafficCard {" line153="        //% block=&quot;Forward&quot;" line154="        forward = 1," line155="        //% block=&quot;Turn around&quot;" line156="        turnaround = 2," line157="        //% block=&quot;Left&quot;" line158="        left = 3," line159="        //% block=&quot;Right&quot;" line160="        right = 4," line161="        //% block=&quot;Stop&quot;" line162="        stop = 5," line163="        //% block=&quot;Speed limit&quot;" line164="        speedlimit = 6," line165="        //% block=&quot;Tunnel&quot;" line166="        tunnel = 7" line167="    }" line168="" line169="    /**" line170="    * Number Card" line171="    */" line172="    export enum NumberCard {" line173="        //% block=&quot;0&quot;" line174="        zero = 0," line175="        //% block=&quot;1&quot;" line176="        one = 1," line177="        //% block=&quot;2&quot;" line178="        two = 2," line179="        //% block=&quot;3&quot;" line180="        three = 3," line181="        //% block=&quot;4&quot;" line182="        four = 4," line183="        //% block=&quot;5&quot;" line184="        five = 5," line185="        //% block=&quot;6&quot;" line186="        six = 6," line187="        //% block=&quot;7&quot;" line188="        seven = 7," line189="        //% block=&quot;8&quot;" line190="        eight = 8," line191="        //% block=&quot;9&quot;" line192="        nine = 9" line193="    }" line194="" line195="    /**" line196="    * Result list" line197="    */" line198="    export enum GetResult {" line199="        //% block=&quot;X&quot;" line200="        result_X = 1," line201="        //% block=&quot;Y&quot;" line202="        result_Y = 2," line203="        //% block=&quot;W&quot;" line204="        result_W = 3," line205="        //% block=&quot;H&quot;" line206="        result_H = 4" line207="    }" line208="" line209="    /**" line210="     * Result XY" line211="     */" line212="    export enum GetResultXY {" line213="        //% block=&quot;X&quot;" line214="        result_X = 1," line215="        //% block=&quot;Y&quot;" line216="        result_Y = 2" line217="    }" line218="" line219="" line220="" line221="" line222="    let btnEvent: (btn: number) =&gt; void" line223="" line224="    function trim(n: string): string {" line225="        while (n.charCodeAt(n.length - 1) &lt; 0x1f) {" line226="            n = n.slice(0, n.length - 1)" line227="        }" line228="        return n" line229="    }" line230="" line231="    serial.onDataReceived('\n', function () {" line232="        let a = serial.readUntil('\n')" line233="        if (a.charAt(0) == 'K') {" line234="            a = trim(a)" line235="            let b = a.slice(1, a.length).split(' ')" line236="            let cmd = parseInt(b[0])" line237="            if (cmd == 42) { // feature extraction" line238="                _className = b[1]" line239="            } else if (cmd == 31) { // face tracking" line240="                _posX = parseInt(b[1])" line241="                _posY = parseInt(b[2])" line242="                _posW = parseInt(b[3])" line243="                _posH = parseInt(b[4])" line244="                _className = b[5]" line245="            } else if (cmd == 15) { // color blob tracking" line246="                _posX = parseInt(b[1])" line247="                _posY = parseInt(b[2])" line248="                _posW = parseInt(b[3])" line249="                _posH = parseInt(b[4])" line250="            } else if (cmd == 19) { // line follower color" line251="                _posX = parseInt(b[1])" line252="                _posY = parseInt(b[2])" line253="            } else if (cmd == 81) { // traffic sign" line254="                _className = b[5]" line255="            } else if (cmd == 83) { // number recognition" line256="                _className = b[5]" line257="            } else if (cmd == 3) { // number recognition" line258="                control.raiseEvent(koiNewEventId, parseInt(b[1]))" line259="            }" line260="        }" line261="    })" line262="" line263="    function getResultXYWH(res: GetResult): number {" line264="        let ret = -1" line265="        if (res == GetResult.result_X) {" line266="            ret = _posX" line267="            _posX = -1" line268="        } else if (res == GetResult.result_Y) {" line269="            ret = _posY" line270="            _posY = -1" line271="        } else if (res == GetResult.result_W) {" line272="            ret = _posW" line273="            _posW = -1" line274="        } else if (res == GetResult.result_H) {" line275="            ret = _posH" line276="            _posH = -1" line277="        }" line278="        return ret" line279="    }" line280="" line281="    function getResultXY(res: GetResultXY): number {" line282="        let ret2 = -1" line283="        if (res == GetResultXY.result_X) {" line284="            ret2 = _posX" line285="            _posX = -1" line286="        } else if (res == GetResultXY.result_Y) {" line287="            ret2 = _posY" line288="            _posY = -1" line289="        }" line290="        return ret2" line291="    }" line292="" line293="    function getResultClass(): string {" line294="        let ret3 = _className" line295="        _className = ''" line296="        return ret3" line297="    }" line298="" line299="" line300="    /**" line301="     * Init the tabbyvision library with serial connection" line302="     * @param tx Tx pin; eg: SerialPin.P13" line303="     * @param rx Rx pin; eg: SerialPin.P14" line304="     */" line305="    //% blockId=tabbyvision_init block=&quot;init tabbyvision Tx %tx Rx %rx&quot;" line306="    //% weight=100 group=&quot;Basic&quot;" line307="    export function init(tx: SerialPin, rx: SerialPin): void {" line308="        serial.redirect(tx, rx, BaudRate.BaudRate115200);" line309="        serial.setTxBufferSize(64)" line310="        serial.setRxBufferSize(64)" line311="        serial.readString()" line312="        serial.writeString('\n\n')" line313="    }" line314="" line315="    /**" line316="     * LCD Direction" line317="     * @param dir Direction; eg: 0" line318="     */" line319="    //% blockId=tabbyvision_lcd_direction block=&quot;LCD direction %dir&quot;" line320="    //% weight=99 group=&quot;Basic&quot;" line321="    export function lcdDirection(dir: LCD_Direction): void {" line322="        serial.writeLine(`K6 ${dir}`)" line323="    }" line324="" line325="    /**" line326="     * When button is pressed" line327="     * @param handler " line328="     */" line329="    //% blockId=tabbyvision_on_button_pressed block=&quot;on button |%btn pressed&quot;" line330="    //% weight=98 group=&quot;Basic&quot;" line331="    export function onButtonPressed(btn: BTNCmd, handler: () =&gt; void) {" line332="        control.onEvent(koiNewEventId, btn, handler);" line333="    }" line334="" line335="    /**" line336="     * Switch Function" line337="     * @param func Function; eg: LineFollower" line338="     */" line339="    //% blockId=tabbyvision_switch_function block=&quot;switch function %func&quot;" line340="    //% weight=97 group=&quot;Basic&quot;" line341="    //% func.fieldEditor=&quot;gridpicker&quot;" line342="    //% func.fieldOptions.columns=3" line343="    export function switchFunction(func: FullFunction): void {" line344="        serial.writeLine(`K97 ${func}`)" line345="    }" line346="" line347="    /**" line348="     * Enable Model + CV" line349="     * @param model Function; eg: FaceTracking" line350="     * @param cv Function; eg: ColorBlobTracking" line351="     */" line352="    //% blockId=tabbyvision_enable_model_cv block=&quot;enable model %model cv %cv&quot;" line353="    //% weight=96 group=&quot;Basic&quot;" line354="    //% model.fieldEditor=&quot;gridpicker&quot;" line355="    //% model.fieldOptions.columns=3" line356="    //% advanced=true" line357="    export function enableModelCV(model: ModelFunction, cv: CvFunction): void {" line358="        serial.writeLine(`K97 ${model+cv}`)" line359="    }" line360="" line361="" line362="    /**" line363="     * Color Blob Tracking Set Color" line364="     * @param color " line365="     */" line366="    //% blockId=tabbyvision_color_blob_tracking_set_color block=&quot;color blob tracking set color %color&quot;" line367="    //% color.shadow=&quot;colorNumberPicker&quot;" line368="    //% weight=90 group=&quot;Color blob tracking&quot;" line369="    export function colorObjectTrackingSetColor(color: ColorList): void {" line370="        serial.writeLine(`K18 ${color}`)" line371="    }" line372="" line373="    /**" line374="     * Color Blob Tracking Calibrate Color" line375="     */" line376="    //% blockId=tabbyvision_color_blob_tracking_calibrate block=&quot;color blob tracking calibrate&quot;" line377="    //% weight=90 group=&quot;Color blob tracking&quot;" line378="    export function colorObjectTrackingCalibrate(): void {" line379="        serial.writeLine(`K16`)" line380="    }" line381="" line382="    /**" line383="     * Color Blob Tracking Get Result" line384="     * @param res for color; eg: GetResult.result_X" line385="     */" line386="    //% block = &quot;color blob tracking get result %res&quot;" line387="    //% blockId=tabbyvision_color_blob_tracking_get_result" line388="    //% weight=89 group=&quot;Color blob tracking&quot;" line389="    //% res.fieldEditor=&quot;gridpicker&quot;" line390="    //% res.fieldOptions.columns=4" line391="" line392="    export function colorObjectTrackingGetPosition(res: GetResult): number {" line393="        return getResultXYWH(res)" line394="    }" line395="" line396="    /**" line397="     * Traffic Sign Get Class" line398="     * @returns class" line399="     */" line400="    //% block=&quot;traffic sign get class:%tsclass&quot;" line401="    //% blockId=tabbyvision_traffic_sign_get_class" line402="    //% weight=80 group=&quot;Traffic sign&quot;" line403="    //% tsclass.fieldEditor=&quot;gridpicker&quot;" line404="    //% tsclass.fieldOptions.columns=2" line405="    export function trafficSignGetClass(tsclass: TrafficCard): boolean {" line406="        let ret4 = _className == tsclass.toString()" line407="        _className = ''" line408="        return ret4" line409="    }" line410="" line411="    /**" line412="     * Traffic Sign Get Position" line413="     * @returns position; eg: GetResult.result_X" line414="     */" line415="    //% blockId=tabbyvision_traffic_sign_get_position block=&quot;traffic sign get position&quot;" line416="    //% weight=79 group=&quot;Traffic sign&quot;" line417="    export function trafficSignGetPosition(res: GetResult): number {" line418="        return getResultXYWH(res)" line419="    }" line420="" line421="    /**" line422="     * Line Follower Set Key Color" line423="     * @param color" line424="     */" line425="    //% blockId=tabbyvision_line_follower_set_threshold block=&quot;line follower set threshold %threshold&quot;" line426="    //% weight=70 group=&quot;Line follower&quot;" line427="    export function lineFollowerSetThreshold(key: ColorNames) {" line428="        serial.writeLine(`K19 ${key}`)" line429="    }" line430="" line431="    /**" line432="     * Line Follower Get Position" line433="     * @returns bias x" line434="     */" line435="    //% blockId=tabbyvision_line_follower_get_position block=&quot;line follower get position&quot;" line436="    //% weight=69 group=&quot;Line follower&quot;" line437="    export function lineFollowerGetPosition(res: GetResultXY): number {" line438="        return getResultXY(res)" line439="    }" line440="" line441="    /**" line442="    * Face Tracking Get Position " line443="    */" line444="    //% block = &quot;face tracking get %res&quot;" line445="    //% blockId=tabbyvision_face_tracking_get_position" line446="    //% weight=60 group=&quot;Face tracking&quot;" line447="    export function faceTrackingGetPosition(res: GetResult): number {" line448="        return getResultXYWH(res)" line449="    }" line450="" line451="    /**" line452="     * Object Tracking Get Class" line453="     * @param object VOC2012_Object; eg: VOC2012_Object.cat" line454="     */" line455="    //% block=&quot;object tracking get class: %object&quot;" line456="    //% blockId=tabbyvision_object_tracking_get_class" line457="    //% weight=50 group=&quot;Object tracking&quot;" line458="    export function objectTrackingGetClass(object: VOC2012_Object): boolean {" line459="        let ret5 = _className == object.toString()" line460="        return ret5" line461="    }" line462="" line463="    /**" line464="     * Object Tracking Get Position" line465="     * @param axis for x; eg: GetResult.result_X" line466="     * @returns position" line467="     */" line468="    //% blockId=tabbyvision_object_tracking_get_position block=&quot;object tracking get position %axis&quot;" line469="    //% weight=49 group=&quot;Object tracking&quot;" line470="    export function objectTrackingGetPosition(axis: GetResult): number {" line471="        return getResultXYWH(axis)" line472="    }" line473="" line474="    /**" line475="     * Classify Image Reset" line476="     */" line477="    //% blockId=tabbyvision_classify_image_reset block=&quot;classify image reset&quot;" line478="    //% weight=40 group=&quot;Classifier&quot;" line479="    export function classifyImageReset(): void {" line480="        serial.writeLine(`K45`)" line481="    }" line482="" line483="    /**" line484="     * Classify Image Add Tag" line485="     * @param name tag; eg: apple" line486="     */" line487="    //% blockId=tabbyvision_classify_image_add_tag block=&quot;classify image add tag %name&quot;" line488="    //% weight=39 group=&quot;Classifier&quot;" line489="    export function classifyImageAddTagID(name: string): void {" line490="        serial.writeLine(`K41 ${name}`)" line491="    }" line492="" line493="    /**" line494="     * Classify Image Get Class" line495="     * @returns class" line496="     */" line497="    //% blockId=tabbyvision_classify_image_get_class block=&quot;classify image get class&quot;" line498="    //% weight=38 group=&quot;Classifier&quot;" line499="    export function classifyImageGetClass(): string {" line500="        return getResultClass()" line501="    }" line502="" line503="    /**" line504="     * Classify Image Save" line505="     * @param path json to save; eg: model.json" line506="     */" line507="    //% blockId=tabbyvision_classify_image_save block=&quot;classify image save classifier %path&quot;" line508="    //% group=&quot;Classifier&quot; weight=35" line509="    export function classifyImageSave(path: string): void {" line510="        let str = `K43 ${path}`" line511="        serial.writeLine(str)" line512="    }" line513="" line514="    /**" line515="     * Classify Image Load" line516="     * @param path json to load; eg: model.json" line517="     */" line518="    //% blockId=tabbyvision_classify_image_load block=&quot;classify image load classifier %path&quot;" line519="    //% group=&quot;Classifier&quot; weight=34" line520="    export function classifyImageLoad(path: string): void {" line521="        let str2 = `K44 ${path}`" line522="        serial.writeLine(str2)" line523="    }" line524="" line525="" line526="    /**" line527="     * Number Recognition is Number ?" line528="     * @param number NumberCard; eg: NumberCard.6" line529="     */" line530="    //% block = &quot;number recognition number is %number ?&quot;" line531="    //% blockId=tabbyvision_number_recognition_is_number " line532="    //% weight=30 group=&quot;Number recognition&quot;" line533="    export function numberRecognitionIsNumber(num: NumberCard): boolean {" line534="        return getResultClass() == num.toString()" line535="    }" line536="" line537="    /**" line538="     * Number Recognition Get Number" line539="     */" line540="    //% block = &quot;number recognition get number &quot;" line541="    //% blockId=tabbyvision_number_recognition_get_number " line542="    //% weight=30 group=&quot;Number recognition&quot;" line543="    export function numberRecognitionGetNumber(): number {" line544="        let transfer = getResultClass()" line545="        if (transfer == ''){" line546="            return -1" line547="        }" line548="        return parseInt(transfer)" line549="    }" line550="" line551="}" numlines="552"></mutation></block></statement></block></xml>