<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="K(!gH^D0ZwZQa[%V`P$/" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="!C8O+J#{b.oN~o#a]pGu" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tabbyvision {" line1="" line2="    let koiNewEventId = 1228" line3="    type Evtss = (t1: string, t2: string) =&gt; void" line4="    let mqttDataEvt: Evtss = null" line5="" line6="    // cached results" line7="    let _className: string = ''" line8="    let _posX: number = -1" line9="    let _posY: number = -1" line10="    let _posW: number = -1" line11="    let _posH: number = -1" line12="    let _lineX1: number = -1" line13="    let _lineY1: number = -1" line14="    let _lineX2: number = -1" line15="    let _lineY2: number = -1" line16="" line17="" line18="    export enum LCD_Direction {" line19="        //% block=Front" line20="        Front = 0," line21="        //% block=Back" line22="        Back = 2" line23="    }" line24="" line25="    export enum BTNCmd {" line26="        //% block=&quot;A&quot;" line27="        A = 1," line28="        //% block=&quot;B&quot;" line29="        B = 2," line30="        //% block=&quot;A+B&quot;" line31="        AB = 3" line32="    }" line33="" line34="    export enum ColorList {" line35="        //% block=&quot;Red&quot;" line36="        Red = 0," line37="        //% block=&quot;Blue&quot;" line38="        Blue = 1," line39="        //% block=&quot;Green&quot;" line40="        Green = 2," line41="        //% block=&quot;Yellow&quot;" line42="        Yellow = 3," line43="        //% block=&quot;Orange&quot;" line44="        Orange = 4," line45="        //% block=&quot;Purple&quot;" line46="        Purple = 5," line47="        //% block=&quot;Pink&quot;" line48="        Pink = 6," line49="        //% block=&quot;White&quot;" line50="        White = 7," line51="        //% block=&quot;Black&quot;" line52="        Black = 8," line53="        //% block=&quot;Custom&quot;" line54="        Custom = 9," line55="    }" line56="" line57="" line58="    export enum ModelFunction {" line59="        //% block=TrafficSign" line60="        TrafficSign = 0x1," line61="        //% block=ObjectTracking" line62="        ObjectTracking = 0x2," line63="        //% block=FaceTracking" line64="        FaceTracking = 0x3," line65="        //% block=NumberRecognition" line66="        NumberRecognition = 0x4," line67="        //% block=ClassifyImage" line68="        ClassifyImage = 0x5," line69="        //% block=LetterRecognition" line70="        LetterRecognition = 0x6,   " line71="    }" line72="" line73="    export enum CvFunction {" line74="        //% block=ColorBlobTracking" line75="        ColorBlobTracking = 0x10," line76="        //% block=LineFollower" line77="        LineFollower = 0x20," line78="    }" line79="" line80="    export enum FullFunction {" line81="        //% block=TrafficSign" line82="        TrafficSign = 0x1," line83="        //% block=ObjectTracking" line84="        ObjectTracking = 0x2," line85="        //% block=FaceTracking" line86="        FaceTracking = 0x3," line87="        //% block=NumberRecognition" line88="        NumberRecognition = 0x4," line89="        //% block=ClassifyImage" line90="        ClassifyImage = 0x5," line91="        //% block=LetterRecognition" line92="        LetterRecognition = 0x6," line93="        //% block=ColorBlobTracking" line94="        ColorBlobTracking = 0x10," line95="        //% block=LineFollower" line96="        LineFollower = 0x20," line97="        //% block=Iot" line98="        Iot = 0x80," line99="    }" line100="" line101="    export enum ColorNames {" line102="        //% block=red" line103="        red = 1," line104="        //% block=blue" line105="        blue = 2," line106="        //% block=yellow" line107="        yellow = 3," line108="        //% block=black" line109="        black = 4," line110="    }" line111="" line112="" line113="" line114="    /*" line115="    * VOC2012_Object Card" line116="    */" line117="" line118="    export enum VOC2012_Object {" line119="        //% block=aeroplane" line120="        aeroplane = 0," line121="        //% block=bicycle" line122="        bicycle = 1," line123="        //% block=bird" line124="        bird = 2," line125="        //% block=boat" line126="        boat = 3," line127="        //% block=bottle" line128="        bottle = 4," line129="        //% block=bus" line130="        bus = 5," line131="        //% block=car" line132="        car = 6," line133="        //% block=cat" line134="        cat = 7," line135="        //% block=chair" line136="        chair = 8," line137="        //% block=cow" line138="        cow = 9," line139="        //% block=diningtable" line140="        diningtable = 10," line141="        //% block=dog" line142="        dog = 11," line143="        //% block=horse" line144="        horse = 12," line145="        //% block=motorbike" line146="        motorbike = 13," line147="        //% block=person" line148="        person = 14," line149="        //% block=pottedplant" line150="        pottedplant = 15," line151="        //% block=sheep" line152="        sheep = 16," line153="        //% block=sofa" line154="        sofa = 17," line155="        //% block=train" line156="        train = 18," line157="        //% block=tvmonitor" line158="        tvmonitor = 19," line159="    }" line160="" line161="    /*" line162="    * Traffic sign Card" line163="    */" line164="    export enum TrafficCard {" line165="        //% block=&quot;U-Turn&quot;" line166="        Around = 0," line167="        //% block=&quot;Forward&quot;" line168="        Forward = 1," line169="        //% block=&quot;Left&quot;" line170="        left = 2," line171="        //% block=&quot;Right&quot;" line172="        Right = 3," line173="        //% block=&quot;Speed Limit 30&quot;" line174="        Limiting30 = 4," line175="        //% block=&quot;Stop&quot;" line176="        Stop = 5," line177="        //% block=&quot;Tunnel&quot;" line178="        Tunnel = 6" line179="    }" line180="" line181="    /**" line182="    * Number Card" line183="    */" line184="    export enum NumberCard {" line185="        //% block=&quot;0&quot;" line186="        zero = 0," line187="        //% block=&quot;1&quot;" line188="        one = 1," line189="        //% block=&quot;2&quot;" line190="        two = 2," line191="        //% block=&quot;3&quot;" line192="        three = 3," line193="        //% block=&quot;4&quot;" line194="        four = 4," line195="        //% block=&quot;5&quot;" line196="        five = 5," line197="        //% block=&quot;6&quot;" line198="        six = 6," line199="        //% block=&quot;7&quot;" line200="        seven = 7," line201="        //% block=&quot;8&quot;" line202="        eight = 8," line203="        //% block=&quot;9&quot;" line204="        nine = 9" line205="    }" line206="    /**" line207="    * Letter Card" line208="    */" line209="    export enum LetterCard {" line210="        //% block=&quot;A&quot;" line211="        A = 0," line212="        //% block=&quot;B&quot;" line213="        B = 1," line214="        //% block=&quot;C&quot;" line215="        C = 2," line216="        //% block=&quot;D&quot;" line217="        D = 3," line218="        //% block=&quot;E&quot;" line219="        E = 4," line220="        //% block=&quot;F&quot;" line221="        F = 5" line222="    }" line223="" line224="    /**" line225="    * Result list" line226="    */" line227="    export enum GetResult {" line228="        //% block=&quot;X&quot;" line229="        result_X = 1," line230="        //% block=&quot;Y&quot;" line231="        result_Y = 2," line232="        //% block=&quot;W&quot;" line233="        result_W = 3," line234="        //% block=&quot;H&quot;" line235="        result_H = 4" line236="    }" line237="" line238="    /**" line239="     * Result XY" line240="     */" line241="    export enum GetResultXY {" line242="        //% block=&quot;X&quot;" line243="        result_X = 1," line244="        //% block=&quot;Y&quot;" line245="        result_Y = 2" line246="    }" line247="" line248="    /**" line249="     * Result line" line250="     */" line251="    export enum Getline {" line252="        //% block=&quot;X1&quot;" line253="        result_X1 = 1," line254="        //% block=&quot;Y1&quot;" line255="        result_Y1 = 2," line256="        //% block=&quot;X2&quot;" line257="        result_X2 = 3," line258="        //% block=&quot;Y2&quot;" line259="        result_Y2 = 4" line260="    }" line261="" line262="" line263="" line264="" line265="    let btnEvent: (btn: number) =&gt; void" line266="" line267="    function trim(n: string): string {" line268="        while (n.charCodeAt(n.length - 1) &lt; 0x1f) {" line269="            n = n.slice(0, n.length - 1)" line270="        }" line271="        return n" line272="    }" line273="" line274="    let modelCmd: number[] = [81,82,83,84];" line275="    serial.onDataReceived('\n', function () {" line276="        let a = serial.readUntil('\n')" line277="        if (a.charAt(0) == 'K') {" line278="            a = trim(a)" line279="            let b = a.slice(1, a.length).split(' ')" line280="            let cmd = parseInt(b[0])" line281="            if (cmd == 42) { // feature extraction" line282="                _className = b[1]" line283="            } else if (cmd == 15) { // color blob tracking" line284="                _posX = parseInt(b[1])" line285="                _posY = parseInt(b[2])" line286="                _posW = parseInt(b[3])" line287="                _posH = parseInt(b[4])" line288="            } else if (cmd == 19) { // line follower color" line289="                _lineX1 = parseInt(b[1])" line290="                _lineY1 = parseInt(b[2])" line291="                _lineX2 = parseInt(b[3])" line292="                _lineY2 = parseInt(b[4])" line293="            } else if (modelCmd.indexOf(cmd) != -1) { // model cmd" line294="                _posX = parseInt(b[1])" line295="                _posY = parseInt(b[2])" line296="                _posW = parseInt(b[3])" line297="                _posH = parseInt(b[4])" line298="                _className = b[5]" line299="            } else if (cmd == 31) { // model cmd" line300="                _posX = parseInt(b[1])" line301="                _posY = parseInt(b[2])" line302="                _posW = parseInt(b[3])" line303="                _posH = parseInt(b[4])" line304="                _className = b[7]" line305="            }else if (cmd == 3) { // btn" line306="                control.raiseEvent(koiNewEventId, parseInt(b[1]))" line307="            } else if (cmd == 55) { // btn" line308="                if (mqttDataEvt) {" line309="                    mqttDataEvt(b[1], b[2])" line310="                }" line311="            }" line312="        }" line313="    })" line314="" line315="    function getResultXYWH(res: GetResult): number {" line316="        let ret = -1" line317="        if (res == GetResult.result_X) {" line318="            ret = _posX" line319="            _posX = -1" line320="        } else if (res == GetResult.result_Y) {" line321="            ret = _posY" line322="            _posY = -1" line323="        } else if (res == GetResult.result_W) {" line324="            ret = _posW" line325="            _posW = -1" line326="        } else if (res == GetResult.result_H) {" line327="            ret = _posH" line328="            _posH = -1" line329="        }" line330="        return ret" line331="    }" line332="" line333="    function getResultXY(res: GetResultXY): number {" line334="        let ret2 = -1" line335="        if (res == GetResultXY.result_X) {" line336="            ret2 = _posX" line337="            _posX = -1" line338="        } else if (res == GetResultXY.result_Y) {" line339="            ret2 = _posY" line340="            _posY = -1" line341="        }" line342="        return ret2" line343="    }" line344="" line345="    function getResultClass(): string {" line346="        let ret3 = _className" line347="        _className = ''" line348="        return ret3" line349="    }" line350="" line351="    function getlineXY(res: Getline): number {" line352="        let ret4 = -1" line353="        if (res == Getline.result_X1) {" line354="            ret4 = _lineX1" line355="            _lineX1 = -1" line356="        } else if (res == Getline.result_Y1) {" line357="            ret4 = _lineY1" line358="            _lineY1 = -1" line359="        } else if (res == Getline.result_X2) {" line360="            ret4 = _lineX2" line361="            _lineX2 = -1" line362="        } else if (res == Getline.result_Y2) {" line363="            ret4 = _lineY2" line364="            _lineY2 = -1" line365="        }" line366="        return ret4" line367="    }" line368="" line369="" line370="    /**" line371="     * Init the tabbyvision library with serial connection" line372="     * @param tx Tx pin; eg: SerialPin.P13" line373="     * @param rx Rx pin; eg: SerialPin.P14" line374="     */" line375="    //% blockId=tabbyvision_init block=&quot;init tabbyvision Tx %tx Rx %rx&quot;" line376="    //% weight=100 group=&quot;Basic&quot;" line377="    export function init(tx: SerialPin, rx: SerialPin): void {" line378="        serial.redirect(tx, rx, BaudRate.BaudRate115200);" line379="        serial.setTxBufferSize(64)" line380="        serial.setRxBufferSize(64)" line381="        serial.readString()" line382="        serial.writeString('\n\n')" line383="    }" line384="" line385="    /**" line386="     * LCD Direction" line387="     * @param dir Direction; eg: 0" line388="     */" line389="    //% blockId=tabbyvision_lcd_direction block=&quot;LCD direction %dir&quot;" line390="    //% weight=99 group=&quot;Basic&quot;" line391="    export function lcdDirection(dir: LCD_Direction): void {" line392="        serial.writeLine(`K6 ${dir}`)" line393="    }" line394="" line395="    /**" line396="     * When button is pressed" line397="     * @param handler " line398="     */" line399="    //% blockId=tabbyvision_on_button_pressed block=&quot;on button |%btn pressed&quot;" line400="    //% weight=98 group=&quot;Basic&quot;" line401="    export function onButtonPressed(btn: BTNCmd, handler: () =&gt; void) {" line402="        control.onEvent(koiNewEventId, btn, handler);" line403="    }" line404="" line405="    /**" line406="     * Switch Function" line407="     * @param func Function; eg: LineFollower" line408="     */" line409="    //% blockId=tabbyvision_switch_function block=&quot;switch function %func&quot;" line410="    //% weight=97 group=&quot;Basic&quot;" line411="    //% func.fieldEditor=&quot;gridpicker&quot;" line412="    //% func.fieldOptions.columns=3" line413="    export function switchFunction(func: FullFunction): void {" line414="        serial.writeLine(`K97 ${func}`)" line415="    }" line416="" line417="    /**" line418="     * Enable Model + CV" line419="     * @param model Function; eg: FaceTracking" line420="     * @param cv Function; eg: ColorBlobTracking" line421="     */" line422="    //% blockId=tabbyvision_enable_model_cv block=&quot;enable model %model cv %cv&quot;" line423="    //% weight=96 group=&quot;Basic&quot;" line424="    //% model.fieldEditor=&quot;gridpicker&quot;" line425="    //% model.fieldOptions.columns=3" line426="    //% advanced=true" line427="    export function enableModelCV(model: ModelFunction, cv: CvFunction): void {" line428="        serial.writeLine(`K97 ${model+cv}`)" line429="    }" line430="" line431="" line432="    /**" line433="     * Color Blob Tracking Set Color" line434="     * @param color " line435="     */" line436="    //% blockId=tabbyvision_color_blob_tracking_set_color block=&quot;color blob tracking set color %color&quot;" line437="    //% color.shadow=&quot;colorNumberPicker&quot;" line438="    //% weight=90 group=&quot;Color blob tracking&quot;" line439="    export function colorObjectTrackingSetColor(color: ColorList): void {" line440="        serial.writeLine(`K18 ${color}`)" line441="    }" line442="" line443="    /**" line444="     * Color Blob Tracking Calibrate Color" line445="     */" line446="    //% blockId=tabbyvision_color_blob_tracking_calibrate block=&quot;color blob tracking calibrate&quot;" line447="    //% weight=90 group=&quot;Color blob tracking&quot;" line448="    export function colorObjectTrackingCalibrate(): void {" line449="        serial.writeLine(`K16`)" line450="    }" line451="" line452="    /**" line453="     * Color Blob Tracking Get Result" line454="     * @param res for color; eg: GetResult.result_X" line455="     */" line456="    //% block = &quot;color blob tracking get result %res&quot;" line457="    //% blockId=tabbyvision_color_blob_tracking_get_result" line458="    //% weight=89 group=&quot;Color blob tracking&quot;" line459="    //% res.fieldEditor=&quot;gridpicker&quot;" line460="    //% res.fieldOptions.columns=4" line461="" line462="    export function colorObjectTrackingGetPosition(res: GetResult): number {" line463="        return getResultXYWH(res)" line464="    }" line465="" line466="    /**" line467="     * Traffic Sign Is Class" line468="     * @returns class" line469="     */" line470="    //% block=&quot;traffic sign is class %tsclass&quot;" line471="    //% blockId=tabbyvision_traffic_sign_is_class" line472="    //% weight=80 group=&quot;Traffic sign&quot;" line473="    //% tsclass.fieldEditor=&quot;gridpicker&quot;" line474="    //% tsclass.fieldOptions.columns=2" line475="    export function trafficSignIsClass(tsclass: TrafficCard): boolean {" line476="        let traffic = [&quot;U-Turn&quot;,&quot;forward&quot;,&quot;left&quot;,&quot;right&quot;,&quot;limiting30&quot;,&quot;stop&quot;,&quot;tunnel&quot;]" line477="        return _className == traffic[tsclass]" line478="    }" line479="" line480="    /**" line481="     * Traffic Sign Get Class" line482="     * @returns class" line483="     */" line484="    //% block=&quot;traffic sign get class&quot;" line485="    //% blockId=tabbyvision_traffic_sign_get_class" line486="    //% weight=80 group=&quot;Traffic sign&quot;" line487="    //% tsclass.fieldEditor=&quot;gridpicker&quot;" line488="    //% tsclass.fieldOptions.columns=2" line489="    export function trafficSignGetClass(): string {" line490="        return _className" line491="    }" line492="" line493="    /**" line494="     * Traffic Sign Get Position" line495="     * @returns position; eg: GetResult.result_X" line496="     */" line497="    //% blockId=tabbyvision_traffic_sign_get_position block=&quot;traffic sign get %res&quot;" line498="    //% weight=79 group=&quot;Traffic sign&quot;" line499="    export function trafficSignGetPosition(res: GetResult): number {" line500="        return getResultXYWH(res)" line501="    }" line502="" line503="    /**" line504="     * Line Follower Set Key Color" line505="     * @param color" line506="     */" line507="    //% blockId=tabbyvision_line_follower_set_threshold block=&quot;line follower set threshold %threshold&quot;" line508="    //% weight=70 group=&quot;Line follower&quot;" line509="    export function lineFollowerSetThreshold(key: ColorNames) {" line510="        serial.writeLine(`K18 ${key}`)" line511="    }" line512="" line513="    /**" line514="     * Line Follower Get Position" line515="     * @returns bias x" line516="     */" line517="    //% blockId=tabbyvision_line_follower_get_position block=&quot;line follower get %res&quot;" line518="    //% weight=69 group=&quot;Line follower&quot;" line519="    export function lineFollowerGetPosition(res: Getline): number {" line520="        return getlineXY(res)" line521="    }" line522="" line523="    /**" line524="    * Face Tracking Get Position " line525="    */" line526="    //% block = &quot;face tracking get %res&quot;" line527="    //% blockId=tabbyvision_face_tracking_get_position" line528="    //% weight=60 group=&quot;Face tracking&quot;" line529="    export function faceTrackingGetPosition(res: GetResult): number {" line530="        return getResultXYWH(res)" line531="    }" line532="" line533="    /**" line534="    * Face Tracking Get Quantity" line535="    */" line536="    //% block = &quot;face tracking get quantity&quot;" line537="    //% blockId=tabbyvision_face_tracking_get_quantity" line538="    //% weight=60 group=&quot;Face tracking&quot;" line539="    export function faceTrackingGetQuantity(): number {" line540="        let transfer = _className" line541="        if (transfer==&quot;&quot;){" line542="            return 0" line543="        }" line544="        return parseInt(transfer)" line545="    }" line546="" line547="    /**" line548="     * Object Tracking is Class" line549="     * @param object VOC2012_Object; eg: VOC2012_Object.cat" line550="     */" line551="    //% block=&quot;object tracking is class %object&quot;" line552="    //% blockId=tabbyvision_object_tracking_is_class" line553="    //% weight=50 group=&quot;Object tracking&quot;" line554="    export function objectTrackingIsClass(obj: VOC2012_Object): boolean {" line555="        let objectList = [&quot;aeroplane&quot;, &quot;bicycle&quot;, &quot;bird&quot;, &quot;boat&quot;, &quot;bottle&quot;, &quot;bus&quot;, &quot;car&quot;, &quot;cat&quot;, &quot;chair&quot;, &quot;cow&quot;, &quot;diningtable&quot;, &quot;dog&quot;, &quot;horse&quot;, &quot;motorbike&quot;, &quot;person&quot;, &quot;pottedplant&quot;, &quot;sheep&quot;, &quot;sofa&quot;, &quot;train&quot;, &quot;tvmonitor&quot;]" line556="        return _className == objectList[obj]" line557="    }" line558="" line559="    /**" line560="     * Object Tracking Get Class" line561="     */" line562="    //% block=&quot;object tracking get class&quot;" line563="    //% blockId=tabbyvision_object_tracking_get_class" line564="    //% weight=50 group=&quot;Object tracking&quot;" line565="    export function objectTrackingGetClass(): string {" line566="        let ret52 = _className" line567="        return ret52" line568="    }" line569="" line570="    /**" line571="     * Object Tracking Get Position" line572="     * @param axis for x; eg: GetResult.result_X" line573="     * @returns position" line574="     */" line575="    //% blockId=tabbyvision_object_tracking_get_position block=&quot;object tracking get position %axis&quot;" line576="    //% weight=49 group=&quot;Object tracking&quot;" line577="    export function objectTrackingGetPosition(axis: GetResult): number {" line578="        return getResultXYWH(axis)" line579="    }" line580="" line581="    /**" line582="     * Classify Image Reset" line583="     */" line584="    //% blockId=tabbyvision_classify_image_reset block=&quot;classify image reset&quot;" line585="    //% weight=40 group=&quot;Classifier&quot;" line586="    export function classifyImageReset(): void {" line587="        serial.writeLine(`K45`)" line588="    }" line589="" line590="    /**" line591="     * Classify Image Add Tag" line592="     * @param name tag; eg: apple" line593="     */" line594="    //% blockId=tabbyvision_classify_image_add_tag block=&quot;classify image add tag %name&quot;" line595="    //% weight=39 group=&quot;Classifier&quot;" line596="    export function classifyImageAddTagID(name: string): void {" line597="        serial.writeLine(`K41 ${name}`)" line598="    }" line599="" line600="    /**" line601="     * Classify Image Get Class" line602="     * @returns class" line603="     */" line604="    //% blockId=tabbyvision_classify_image_get_class block=&quot;classify image get class&quot;" line605="    //% weight=38 group=&quot;Classifier&quot;" line606="    export function classifyImageGetClass(): string {" line607="        return getResultClass()" line608="    }" line609="" line610="    /**" line611="     * Classify Image Save" line612="     * @param path json to save; eg: model.json" line613="     */" line614="    //% blockId=tabbyvision_classify_image_save block=&quot;classify image save model to local&quot;" line615="    //% group=&quot;Classifier&quot; weight=35" line616="    export function classifyImageSave(): void {" line617="        let str = `K43 /flash/clsData.json`" line618="        serial.writeLine(str)" line619="    }" line620="" line621="    /**" line622="     * Classify Image Load" line623="     * @param path json to load; eg: model.json" line624="     */" line625="    //% blockId=tabbyvision_classify_image_load block=&quot;classify image load model from local&quot;" line626="    //% group=&quot;Classifier&quot; weight=34" line627="    export function classifyImageLoad(): void {" line628="        let str2 = `K44 /flash/clsData.json`" line629="        serial.writeLine(str2)" line630="    }" line631="" line632="" line633="    /**" line634="     * Number Recognition is Number" line635="     * @param number NumberCard; eg: NumberCard.6" line636="     */" line637="    //% block = &quot;number recognition number is %number&quot;" line638="    //% blockId=tabbyvision_number_recognition_is_number " line639="    //% weight=30 group=&quot;Number recognition&quot;" line640="    export function numberRecognitionIsNumber(num: NumberCard): boolean {" line641="        return _className == num.toString()" line642="    }" line643="" line644="    /**" line645="     * Number Recognition Get Number" line646="     */" line647="    //% block = &quot;number recognition get number &quot;" line648="    //% blockId=tabbyvision_number_recognition_get_number " line649="    //% weight=30 group=&quot;Number recognition&quot;" line650="    export function numberRecognitionGetNumber(): number {" line651="        let transfer2 = getResultClass()" line652="        if (transfer2 == ''){" line653="            return -1" line654="        }" line655="        return parseInt(transfer2)" line656="    }" line657="" line658="    /**" line659="    * Number Recognition Get Position" line660="    */" line661="    //% block = &quot;number recognition get %res&quot;" line662="    //% blockId=tabbyvision_number_recognition_get_position" line663="    //% weight=60 group=&quot;Number recognition&quot;" line664="    export function numberRecognitionGetPosition(res: GetResult): number {" line665="        return getResultXYWH(res)" line666="    }" line667="" line668="" line669="    /**" line670="     * Letter Recognition is Letter" line671="     * @param letter LetterCard; eg: LetterCard.6" line672="     */" line673="    //% block = &quot;letter recognition letter is %letter ?&quot;" line674="    //% blockId=tabbyvision_letter_recognition_is_letter " line675="    //% weight=30 group=&quot;Letter recognition&quot;" line676="    export function letterRecognitionIsLetter(letter: LetterCard): boolean {" line677="        let letterList = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;]" line678="        return _className == letterList[letter]" line679="    }" line680="" line681="    /**" line682="     * Letter Recognition Get Letter" line683="     */" line684="    //% block = &quot;letter recognition get letter &quot;" line685="    //% blockId=tabbyvision_letter_recognition_get_letter " line686="    //% weight=30 group=&quot;Letter recognition&quot;" line687="    export function letterRecognitionGetLetter(): string {" line688="        return getResultClass()" line689="    }" line690="    " line691="    /**" line692="    * Letter Recognition Get Position" line693="    */" line694="    //% block = &quot;letter recognition get %res&quot;" line695="    //% blockId=tabbyvision_letter_recognition_get_position" line696="    //% weight=60 group=&quot;Letter recognition&quot;" line697="    export function letterRecognitionGetPosition(res: GetResult): number {" line698="        return getResultXYWH(res)" line699="    }" line700="" line701="    /**" line702="     * @param ssid SSID; eg: ssid" line703="     * @param pass PASSWORD; eg: password" line704="     */" line705="    //% blockId=tabbyvision_join_ap block=&quot;Join Ap %ssid %pass&quot;" line706="    //% group=&quot;Wifi&quot; weight=50" line707="    export function tabbyvision_join_ap(ssid: string, pass: string) {" line708="        serial.writeLine(`K50 ${ssid} ${pass}`)" line709="        basic.pause(13000)" line710="    }" line711="" line712="    /**" line713="     * @param host Mqtt host; eg: iot.kittenbot.cn" line714="     * @param cid Client ID; eg: clientid" line715="     * @param port Host Port; eg: 1883" line716="     * @param user Username; eg: user" line717="     * @param pass Password; eg: pass" line718="     */" line719="    //% blockId=tabbyvision_mqtt_host block=&quot;Mqtt Host %host| clientID%cid||Port%port User%user Pass%pass&quot;" line720="    //% group=&quot;Wifi&quot; weight=46" line721="    export function tabbyvision_mqtt_host(" line722="        host: string," line723="        cid: string," line724="        port: number = 1883," line725="        user: string = null," line726="        pass: string = null" line727="    ) {" line728="        if (user &amp;&amp; pass) {" line729="            serial.writeLine(`K51 ${host} ${cid} ${port} ${user} ${pass}`)" line730="        } else {" line731="            serial.writeLine(`K51 ${host} ${cid} ${port}`)" line732="        }" line733="        basic.pause(2000)" line734="    }" line735="" line736="    /**" line737="     * @param topic Topic to subscribe; eg: /topic" line738="     */" line739="    //% blockId=tabbyvision_mqtt_sub block=&quot;Mqtt Subscribe %topic&quot;" line740="    //% group=&quot;Wifi&quot; weight=45" line741="    export function tabbyvision_mqtt_sub(topic: string) {" line742="        serial.writeLine(`K52 ${topic}`)" line743="        basic.pause(500)" line744="    }" line745="" line746="    /**" line747="     * @param topic Topic to publish; eg: /topic" line748="     * @param data Data to publish; eg: hello" line749="     */" line750="    //% blockId=tabbyvision_mqtt_pub block=&quot;Mqtt Publish %topic %data&quot;" line751="    //% group=&quot;Wifi&quot; weight=44" line752="    export function tabbyvision_mqtt_pub(topic: string, data: string) {" line753="        serial.writeLine(`K53 ${topic} ${data}`)" line754="    }" line755="" line756="    /**" line757="     * @param topic Mqtt Read; eg: /topic" line758="     */" line759="    //% blockId=tabbyvision_mqtt_read block=&quot;Mqtt Read %topic&quot;" line760="    //% group=&quot;Wifi&quot; weight=43" line761="    export function tabbyvision_mqtt_read(topic: string) {" line762="        topic = topic || ''" line763="        let str3 = `K55 ${topic}`" line764="        serial.writeLine(str3)" line765="        basic.pause(200)" line766="" line767="    }" line768="" line769="    //% blockId=tabbyvision_mqtt_onread block=&quot;on Mqtt Data&quot;" line770="    //% group=&quot;Wifi&quot; weight=42 draggableParameters=reporter" line771="    export function tabbyvision_mqtt_onread(" line772="        handler: (data: string, topic: string) =&gt; void" line773="    ) {" line774="        mqttDataEvt = handler" line775="    }" line776="}" numlines="777"></mutation></block></statement></block></xml>