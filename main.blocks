<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="OCNJtX5g04VvG.-E6BS(" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="ICq1hKKS=m.yl7MjaUi." editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tabbyvision {" line1="" line2="    let koiNewEventId = 1228" line3="" line4="    // cached results" line5="    let _className: string = ''" line6="    let _posX: number = -1" line7="    let _posY: number = -1" line8="    let _posW: number = -1" line9="    let _posH: number = -1" line10="" line11="" line12="    export enum LCD_Direction {" line13="        //% block=Front" line14="        Front = 0," line15="        //% block=Back" line16="        Back = 2" line17="    }" line18="" line19="    export enum BTNCmd {" line20="        //% block=&quot;A&quot;" line21="        A = 1," line22="        //% block=&quot;B&quot;" line23="        B = 2," line24="        //% block=&quot;A+B&quot;" line25="        AB = 3" line26="    }" line27="" line28="    export enum ColorList {" line29="        //% block=&quot;Red&quot;" line30="        Red = 0," line31="        //% block=&quot;Blue&quot;" line32="        Blue = 1," line33="        //% block=&quot;Green&quot;" line34="        Green = 2," line35="        //% block=&quot;Yellow&quot;" line36="        Yellow = 3," line37="        //% block=&quot;Orange&quot;" line38="        Orange = 4," line39="        //% block=&quot;Purple&quot;" line40="        Purple = 5," line41="        //% block=&quot;Pink&quot;" line42="        Pink = 6," line43="        //% block=&quot;White&quot;" line44="        White = 7," line45="        //% block=&quot;Black&quot;" line46="        Black = 8," line47="        //% block=&quot;Custom&quot;" line48="        Custom = 9," line49="    }" line50="" line51="" line52="    export enum ModelFunction {" line53="        //% block=TrafficSign" line54="        TrafficSign = 0x1," line55="        //% block=ObjectTracking" line56="        ObjectTracking = 0x2," line57="        //% block=FaceTracking" line58="        FaceTracking = 0x3," line59="        //% block=NumberRecognition" line60="        NumberRecognition = 0x4," line61="        //% block=ClassifyImage" line62="        ClassifyImage = 0x5," line63="        //% block=LetterRecognition" line64="        LetterRecognition = 0x6,   " line65="    }" line66="" line67="    export enum CvFunction {" line68="        //% block=ColorBlobTracking" line69="        ColorBlobTracking = 0x10," line70="        //% block=LineFollower" line71="        LineFollower = 0x20," line72="    }" line73="" line74="    export enum FullFunction {" line75="        //% block=TrafficSign" line76="        TrafficSign = 0x1," line77="        //% block=ObjectTracking" line78="        ObjectTracking = 0x2," line79="        //% block=FaceTracking" line80="        FaceTracking = 0x3," line81="        //% block=NumberRecognition" line82="        NumberRecognition = 0x4," line83="        //% block=ClassifyImage" line84="        ClassifyImage = 0x5," line85="        //% block=LetterRecognition" line86="        LetterRecognition = 0x6," line87="        //% block=ColorBlobTracking" line88="        ColorBlobTracking = 0x10," line89="        //% block=LineFollower" line90="        LineFollower = 0x20," line91="    }" line92="" line93="    export enum ColorNames {" line94="        //% block=red" line95="        red = 1," line96="        //% block=blue" line97="        blue = 2," line98="        //% block=yellow" line99="        yellow = 3," line100="    }" line101="" line102="" line103="" line104="    /*" line105="    * VOC2012_Object Card" line106="    */" line107="" line108="    export enum VOC2012_Object {" line109="        //% block=nothing" line110="        nothing = -1," line111="        //% block=aeroplane" line112="        aeroplane = 0," line113="        //% block=bicycle" line114="        bicycle = 1," line115="        //% block=bird" line116="        bird = 2," line117="        //% block=boat" line118="        boat = 3," line119="        //% block=bottle" line120="        bottle = 4," line121="        //% block=bus" line122="        bus = 5," line123="        //% block=car" line124="        car = 6," line125="        //% block=cat" line126="        cat = 7," line127="        //% block=chair" line128="        chair = 8," line129="        //% block=cow" line130="        cow = 9," line131="        //% block=diningtable" line132="        diningtable = 10," line133="        //% block=dog" line134="        dog = 11," line135="        //% block=horse" line136="        horse = 12," line137="        //% block=motorbike" line138="        motorbike = 13," line139="        //% block=person" line140="        person = 14," line141="        //% block=pottedplant" line142="        pottedplant = 15," line143="        //% block=sheep" line144="        sheep = 16," line145="        //% block=sofa" line146="        sofa = 17," line147="        //% block=train" line148="        train = 18," line149="        //% block=tvmonitor" line150="        tvmonitor = 19," line151="    }" line152="" line153="    /*" line154="    * Traffic sign Card" line155="    */" line156="    export enum TrafficCard {" line157="        //% block=&quot;Forward&quot;" line158="        forward = 1," line159="        //% block=&quot;Turn around&quot;" line160="        turnaround = 2," line161="        //% block=&quot;Left&quot;" line162="        left = 3," line163="        //% block=&quot;Right&quot;" line164="        right = 4," line165="        //% block=&quot;Stop&quot;" line166="        stop = 5," line167="        //% block=&quot;Speed limit&quot;" line168="        speedlimit = 6," line169="        //% block=&quot;Tunnel&quot;" line170="        tunnel = 7" line171="    }" line172="" line173="    /**" line174="    * Number Card" line175="    */" line176="    export enum NumberCard {" line177="        //% block=&quot;0&quot;" line178="        zero = 0," line179="        //% block=&quot;1&quot;" line180="        one = 1," line181="        //% block=&quot;2&quot;" line182="        two = 2," line183="        //% block=&quot;3&quot;" line184="        three = 3," line185="        //% block=&quot;4&quot;" line186="        four = 4," line187="        //% block=&quot;5&quot;" line188="        five = 5," line189="        //% block=&quot;6&quot;" line190="        six = 6," line191="        //% block=&quot;7&quot;" line192="        seven = 7," line193="        //% block=&quot;8&quot;" line194="        eight = 8," line195="        //% block=&quot;9&quot;" line196="        nine = 9" line197="    }" line198="    /**" line199="    * Letter Card" line200="    */" line201="    export enum LetterCard {" line202="        //% block=&quot;A&quot;" line203="        A = 0," line204="        //% block=&quot;B&quot;" line205="        B = 1," line206="        //% block=&quot;C&quot;" line207="        C = 2," line208="        //% block=&quot;D&quot;" line209="        D = 3," line210="        //% block=&quot;E&quot;" line211="        E = 4," line212="        //% block=&quot;F&quot;" line213="        F = 5" line214="    }" line215="" line216="    /**" line217="    * Result list" line218="    */" line219="    export enum GetResult {" line220="        //% block=&quot;X&quot;" line221="        result_X = 1," line222="        //% block=&quot;Y&quot;" line223="        result_Y = 2," line224="        //% block=&quot;W&quot;" line225="        result_W = 3," line226="        //% block=&quot;H&quot;" line227="        result_H = 4" line228="    }" line229="" line230="    /**" line231="     * Result XY" line232="     */" line233="    export enum GetResultXY {" line234="        //% block=&quot;X&quot;" line235="        result_X = 1," line236="        //% block=&quot;Y&quot;" line237="        result_Y = 2" line238="    }" line239="" line240="" line241="" line242="" line243="    let btnEvent: (btn: number) =&gt; void" line244="" line245="    function trim(n: string): string {" line246="        while (n.charCodeAt(n.length - 1) &lt; 0x1f) {" line247="            n = n.slice(0, n.length - 1)" line248="        }" line249="        return n" line250="    }" line251="" line252="    serial.onDataReceived('\n', function () {" line253="        let a = serial.readUntil('\n')" line254="        if (a.charAt(0) == 'K') {" line255="            a = trim(a)" line256="            let b = a.slice(1, a.length).split(' ')" line257="            let cmd = parseInt(b[0])" line258="            if (cmd == 42) { // feature extraction" line259="                _className = b[1]" line260="            } else if (cmd == 31) { // face tracking" line261="                _posX = parseInt(b[1])" line262="                _posY = parseInt(b[2])" line263="                _posW = parseInt(b[3])" line264="                _posH = parseInt(b[4])" line265="                _className = b[5]" line266="            } else if (cmd == 15) { // color blob tracking" line267="                _posX = parseInt(b[1])" line268="                _posY = parseInt(b[2])" line269="                _posW = parseInt(b[3])" line270="                _posH = parseInt(b[4])" line271="            } else if (cmd == 19) { // line follower color" line272="                _posX = parseInt(b[1])" line273="                _posY = parseInt(b[2])" line274="            } else if (cmd == 81) { // traffic sign" line275="                _className = b[5]" line276="            } else if (cmd == 83) { // number recognition" line277="                _className = b[5]" line278="            } else if (cmd == 84) { // letter recognition" line279="                _className = b[5]" line280="            } else if (cmd == 3) { // btn" line281="                control.raiseEvent(koiNewEventId, parseInt(b[1]))" line282="            }" line283="        }" line284="    })" line285="" line286="    function getResultXYWH(res: GetResult): number {" line287="        let ret = -1" line288="        if (res == GetResult.result_X) {" line289="            ret = _posX" line290="            _posX = -1" line291="        } else if (res == GetResult.result_Y) {" line292="            ret = _posY" line293="            _posY = -1" line294="        } else if (res == GetResult.result_W) {" line295="            ret = _posW" line296="            _posW = -1" line297="        } else if (res == GetResult.result_H) {" line298="            ret = _posH" line299="            _posH = -1" line300="        }" line301="        return ret" line302="    }" line303="" line304="    function getResultXY(res: GetResultXY): number {" line305="        let ret2 = -1" line306="        if (res == GetResultXY.result_X) {" line307="            ret2 = _posX" line308="            _posX = -1" line309="        } else if (res == GetResultXY.result_Y) {" line310="            ret2 = _posY" line311="            _posY = -1" line312="        }" line313="        return ret2" line314="    }" line315="" line316="    function getResultClass(): string {" line317="        let ret3 = _className" line318="        _className = ''" line319="        return ret3" line320="    }" line321="" line322="" line323="    /**" line324="     * Init the tabbyvision library with serial connection" line325="     * @param tx Tx pin; eg: SerialPin.P13" line326="     * @param rx Rx pin; eg: SerialPin.P14" line327="     */" line328="    //% blockId=tabbyvision_init block=&quot;init tabbyvision Tx %tx Rx %rx&quot;" line329="    //% weight=100 group=&quot;Basic&quot;" line330="    export function init(tx: SerialPin, rx: SerialPin): void {" line331="        serial.redirect(tx, rx, BaudRate.BaudRate115200);" line332="        serial.setTxBufferSize(64)" line333="        serial.setRxBufferSize(64)" line334="        serial.readString()" line335="        serial.writeString('\n\n')" line336="    }" line337="" line338="    /**" line339="     * LCD Direction" line340="     * @param dir Direction; eg: 0" line341="     */" line342="    //% blockId=tabbyvision_lcd_direction block=&quot;LCD direction %dir&quot;" line343="    //% weight=99 group=&quot;Basic&quot;" line344="    export function lcdDirection(dir: LCD_Direction): void {" line345="        serial.writeLine(`K6 ${dir}`)" line346="    }" line347="" line348="    /**" line349="     * When button is pressed" line350="     * @param handler " line351="     */" line352="    //% blockId=tabbyvision_on_button_pressed block=&quot;on button |%btn pressed&quot;" line353="    //% weight=98 group=&quot;Basic&quot;" line354="    export function onButtonPressed(btn: BTNCmd, handler: () =&gt; void) {" line355="        control.onEvent(koiNewEventId, btn, handler);" line356="    }" line357="" line358="    /**" line359="     * Switch Function" line360="     * @param func Function; eg: LineFollower" line361="     */" line362="    //% blockId=tabbyvision_switch_function block=&quot;switch function %func&quot;" line363="    //% weight=97 group=&quot;Basic&quot;" line364="    //% func.fieldEditor=&quot;gridpicker&quot;" line365="    //% func.fieldOptions.columns=3" line366="    export function switchFunction(func: FullFunction): void {" line367="        serial.writeLine(`K97 ${func}`)" line368="    }" line369="" line370="    /**" line371="     * Enable Model + CV" line372="     * @param model Function; eg: FaceTracking" line373="     * @param cv Function; eg: ColorBlobTracking" line374="     */" line375="    //% blockId=tabbyvision_enable_model_cv block=&quot;enable model %model cv %cv&quot;" line376="    //% weight=96 group=&quot;Basic&quot;" line377="    //% model.fieldEditor=&quot;gridpicker&quot;" line378="    //% model.fieldOptions.columns=3" line379="    //% advanced=true" line380="    export function enableModelCV(model: ModelFunction, cv: CvFunction): void {" line381="        serial.writeLine(`K97 ${model+cv}`)" line382="    }" line383="" line384="" line385="    /**" line386="     * Color Blob Tracking Set Color" line387="     * @param color " line388="     */" line389="    //% blockId=tabbyvision_color_blob_tracking_set_color block=&quot;color blob tracking set color %color&quot;" line390="    //% color.shadow=&quot;colorNumberPicker&quot;" line391="    //% weight=90 group=&quot;Color blob tracking&quot;" line392="    export function colorObjectTrackingSetColor(color: ColorList): void {" line393="        serial.writeLine(`K18 ${color}`)" line394="    }" line395="" line396="    /**" line397="     * Color Blob Tracking Calibrate Color" line398="     */" line399="    //% blockId=tabbyvision_color_blob_tracking_calibrate block=&quot;color blob tracking calibrate&quot;" line400="    //% weight=90 group=&quot;Color blob tracking&quot;" line401="    export function colorObjectTrackingCalibrate(): void {" line402="        serial.writeLine(`K16`)" line403="    }" line404="" line405="    /**" line406="     * Color Blob Tracking Get Result" line407="     * @param res for color; eg: GetResult.result_X" line408="     */" line409="    //% block = &quot;color blob tracking get result %res&quot;" line410="    //% blockId=tabbyvision_color_blob_tracking_get_result" line411="    //% weight=89 group=&quot;Color blob tracking&quot;" line412="    //% res.fieldEditor=&quot;gridpicker&quot;" line413="    //% res.fieldOptions.columns=4" line414="" line415="    export function colorObjectTrackingGetPosition(res: GetResult): number {" line416="        return getResultXYWH(res)" line417="    }" line418="" line419="    /**" line420="     * Traffic Sign Get Class" line421="     * @returns class" line422="     */" line423="    //% block=&quot;traffic sign get class:%tsclass&quot;" line424="    //% blockId=tabbyvision_traffic_sign_get_class" line425="    //% weight=80 group=&quot;Traffic sign&quot;" line426="    //% tsclass.fieldEditor=&quot;gridpicker&quot;" line427="    //% tsclass.fieldOptions.columns=2" line428="    export function trafficSignGetClass(tsclass: TrafficCard): boolean {" line429="        let ret4 = _className == tsclass.toString()" line430="        _className = ''" line431="        return ret4" line432="    }" line433="" line434="    /**" line435="     * Traffic Sign Get Position" line436="     * @returns position; eg: GetResult.result_X" line437="     */" line438="    //% blockId=tabbyvision_traffic_sign_get_position block=&quot;traffic sign get position&quot;" line439="    //% weight=79 group=&quot;Traffic sign&quot;" line440="    export function trafficSignGetPosition(res: GetResult): number {" line441="        return getResultXYWH(res)" line442="    }" line443="" line444="    /**" line445="     * Line Follower Set Key Color" line446="     * @param color" line447="     */" line448="    //% blockId=tabbyvision_line_follower_set_threshold block=&quot;line follower set threshold %threshold&quot;" line449="    //% weight=70 group=&quot;Line follower&quot;" line450="    export function lineFollowerSetThreshold(key: ColorNames) {" line451="        serial.writeLine(`K19 ${key}`)" line452="    }" line453="" line454="    /**" line455="     * Line Follower Get Position" line456="     * @returns bias x" line457="     */" line458="    //% blockId=tabbyvision_line_follower_get_position block=&quot;line follower get position&quot;" line459="    //% weight=69 group=&quot;Line follower&quot;" line460="    export function lineFollowerGetPosition(res: GetResultXY): number {" line461="        return getResultXY(res)" line462="    }" line463="" line464="    /**" line465="    * Face Tracking Get Position " line466="    */" line467="    //% block = &quot;face tracking get %res&quot;" line468="    //% blockId=tabbyvision_face_tracking_get_position" line469="    //% weight=60 group=&quot;Face tracking&quot;" line470="    export function faceTrackingGetPosition(res: GetResult): number {" line471="        return getResultXYWH(res)" line472="    }" line473="" line474="    /**" line475="     * Object Tracking Get Class" line476="     * @param object VOC2012_Object; eg: VOC2012_Object.cat" line477="     */" line478="    //% block=&quot;object tracking get class: %object&quot;" line479="    //% blockId=tabbyvision_object_tracking_get_class" line480="    //% weight=50 group=&quot;Object tracking&quot;" line481="    export function objectTrackingGetClass(object: VOC2012_Object): boolean {" line482="        let ret5 = _className == object.toString()" line483="        return ret5" line484="    }" line485="" line486="    /**" line487="     * Object Tracking Get Position" line488="     * @param axis for x; eg: GetResult.result_X" line489="     * @returns position" line490="     */" line491="    //% blockId=tabbyvision_object_tracking_get_position block=&quot;object tracking get position %axis&quot;" line492="    //% weight=49 group=&quot;Object tracking&quot;" line493="    export function objectTrackingGetPosition(axis: GetResult): number {" line494="        return getResultXYWH(axis)" line495="    }" line496="" line497="    /**" line498="     * Classify Image Reset" line499="     */" line500="    //% blockId=tabbyvision_classify_image_reset block=&quot;classify image reset&quot;" line501="    //% weight=40 group=&quot;Classifier&quot;" line502="    export function classifyImageReset(): void {" line503="        serial.writeLine(`K45`)" line504="    }" line505="" line506="    /**" line507="     * Classify Image Add Tag" line508="     * @param name tag; eg: apple" line509="     */" line510="    //% blockId=tabbyvision_classify_image_add_tag block=&quot;classify image add tag %name&quot;" line511="    //% weight=39 group=&quot;Classifier&quot;" line512="    export function classifyImageAddTagID(name: string): void {" line513="        serial.writeLine(`K41 ${name}`)" line514="    }" line515="" line516="    /**" line517="     * Classify Image Get Class" line518="     * @returns class" line519="     */" line520="    //% blockId=tabbyvision_classify_image_get_class block=&quot;classify image get class&quot;" line521="    //% weight=38 group=&quot;Classifier&quot;" line522="    export function classifyImageGetClass(): string {" line523="        return getResultClass()" line524="    }" line525="" line526="    /**" line527="     * Classify Image Save" line528="     * @param path json to save; eg: model.json" line529="     */" line530="    //% blockId=tabbyvision_classify_image_save block=&quot;classify image save classifier %path&quot;" line531="    //% group=&quot;Classifier&quot; weight=35" line532="    export function classifyImageSave(path: string): void {" line533="        let str = `K43 ${path}`" line534="        serial.writeLine(str)" line535="    }" line536="" line537="    /**" line538="     * Classify Image Load" line539="     * @param path json to load; eg: model.json" line540="     */" line541="    //% blockId=tabbyvision_classify_image_load block=&quot;classify image load classifier %path&quot;" line542="    //% group=&quot;Classifier&quot; weight=34" line543="    export function classifyImageLoad(path: string): void {" line544="        let str2 = `K44 ${path}`" line545="        serial.writeLine(str2)" line546="    }" line547="" line548="" line549="    /**" line550="     * Number Recognition is Number ?" line551="     * @param number NumberCard; eg: NumberCard.6" line552="     */" line553="    //% block = &quot;number recognition number is %number ?&quot;" line554="    //% blockId=tabbyvision_number_recognition_is_number " line555="    //% weight=30 group=&quot;Number recognition&quot;" line556="    export function numberRecognitionIsNumber(num: NumberCard): boolean {" line557="        return getResultClass() == num.toString()" line558="    }" line559="" line560="    /**" line561="     * Number Recognition Get Number" line562="     */" line563="    //% block = &quot;number recognition get number &quot;" line564="    //% blockId=tabbyvision_number_recognition_get_number " line565="    //% weight=30 group=&quot;Number recognition&quot;" line566="    export function numberRecognitionGetNumber(): number {" line567="        let transfer = getResultClass()" line568="        if (transfer == ''){" line569="            return -1" line570="        }" line571="        return parseInt(transfer)" line572="    }" line573="" line574="" line575="    /**" line576="     * Letter Recognition is Letter ?" line577="     * @param letter LetterCard; eg: LetterCard.6" line578="     */" line579="    //% block = &quot;letter recognition letter is %letter ?&quot;" line580="    //% blockId=tabbyvision_letter_recognition_is_letter " line581="    //% weight=30 group=&quot;Letter recognition&quot;" line582="    export function letterRecognitionIsLetter(letter: LetterCard): boolean {" line583="        let letterList = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;]" line584="        return getResultClass() == letterList[letter]" line585="    }" line586="" line587="    /**" line588="     * Letter Recognition Get Letter" line589="     */" line590="    //% block = &quot;letter recognition get letter &quot;" line591="    //% blockId=tabbyvision_letter_recognition_get_letter " line592="    //% weight=30 group=&quot;Letter recognition&quot;" line593="    export function letterRecognitionGetLetter(): string {" line594="        return getResultClass()" line595="    }" line596="" line597="}" numlines="598"></mutation></block></statement></block></xml>